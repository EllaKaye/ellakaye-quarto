<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ella Kaye</title>
<link>https://ellakaye.co.uk/posts.html#category=R</link>
<atom:link href="https://ellakaye.co.uk/posts-r.xml" rel="self" type="application/rss+xml"/>
<description>Personal website, portfolio and blog</description>
<image>
<url>https://ellakaye.co.uk/images/logo.png</url>
<title>Ella Kaye</title>
<link>https://ellakaye.co.uk/posts.html#category=R</link>
<height>144</height>
<width>144</width>
</image>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 25 May 2021 23:00:00 GMT</lastBuildDate>
<item>
  <title>Custom syntax highlighting for {distill} part 2</title>
  <dc:creator>Ella Kaye</dc:creator>
  <link>https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index.html</link>
  <description><![CDATA[ 




<div class="top-callout callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Update: August 2022
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Since this post was originally written, I have replaced my {disill} website with this one built with <a href="https://quarto.org">Quarto</a>.</p>
<p>The highlighting you’ll see below is not quite the same as it appeared on my previous site, because the default <code>arrow</code> theme is implemented differently in {distill} and Quarto.<sup>1</sup> Moreover, I’m now using a very pale gray rather than white background, which necessitated a small shift in the green to achieve a sufficient colour contrast. And if you’re reading this in dark mode, it’s a whole different scheme again, though built on the same principles as described below.</p>
<p>I am keeping this post otherwise as was on the blog for posterity. Most of the content holds, regardless of how the site was built.</p>
</div>
</div>
</div>
<section id="part-1-recap-and-part-2-overview" class="level2">
<h2 class="anchored" data-anchor-id="part-1-recap-and-part-2-overview">Part 1 recap and part 2 overview</h2>
<p>In part 1 of this series, <a href="../../posts/2021-05-25_custom-highlighting-distill-1/index.html">Custom syntax highlighting for {distill}: Modifying the theme</a>, I describe how and why I went about the process of finding and modifying the default syntax highlighting for <a href="(https://rstudio.github.io/distill/)">{distill}</a> and how I created a function that wrapped that process for <a href="https://ellakaye.github.io/distilltools">{distilltools}</a>. I discuss the default syntax highlighting theme used on {distill} sites, and how we can modify it by replacing the five colours used there with five colours of our choosing.</p>
<p>I also outline the four criteria that were important to me as I went about choosing colours for my own syntax highlighting theme:</p>
<ul>
<li>It be based on the <span style="color:#D4006A">pink</span> that I use in my logo and elsewhere throughout this site</li>
<li>It uses colour theory to pick colours that look appealing together</li>
<li>It meets <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG web accessibility guidelines</a>, by ensuring sufficient colour contrast, i.e.&nbsp;a ratio of 4.5:1, between each of the colours in the theme and this site’s background colour (white)</li>
<li>The colours in the palette are colourblind-friendly, i.e.&nbsp;still distinguishable to people with various difference types of colourblindness.</li>
</ul>
<p>This post spins out from Part 1 with a brief primer on colour theory and then a deep-dive into the processes, both thought and practical, of choosing colours for my palette that meet the above criteria. I show how I first went about this to derive the palette that’s implemented throughout this site. I also demonstrate a different, entirely R-based, approach to satisfying the criteria, which I decided to try out after learning more about different colour spaces as I was writing up this post. I much preferred the outcome of one approach to the other, but your mileage may vary.</p>
</section>
<section id="a-brief-primer-on-colour-theory" class="level2">
<h2 class="anchored" data-anchor-id="a-brief-primer-on-colour-theory">A brief primer on colour theory</h2>
<section id="colour-harmonies" class="level3">
<h3 class="anchored" data-anchor-id="colour-harmonies">Colour harmonies</h3>
<div class="cell">
<div class="cell-output-display">
<div id="fig-hsl-colour-wheel" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/hsl-colour-wheel-d4006a.png" class="img-fluid figure-img" alt="A circle filled with hues of red at the top (0 degrees), moving smoothly through orange, yellow (60 degrees), green (120 degrees), cyan (180 degrees), blue (240 degrees) and magenta(300 degrees) as you rotate clockwise round the circle. The colours are more saturated towards the edge of the circle and greyer towards the centre." width="402"></p>
<figcaption class="figure-caption">Figure&nbsp;1: An HSL colour wheel. Screen shot from <a href="https://www.canva.com/colors/color-wheel/">https://www.canva.com/colors/color-wheel/</a>, annotations adapted from <a href="https://dev.to/rneha725/hsl-and-hsla-in-css-31j3">https://dev.to/rneha725/hsl-and-hsla-in-css-31j3</a>.</figcaption>
</figure>
</div>
</div>
</div>
<p>Colour theory determines which colours ‘look good’ together, based on their relative position on a colour wheel, such as that in Figure&nbsp;1, somewhat analogously, I think, to how certain musical intervals sound more pleasing/harmonious than others, depending on the ratio of their frequencies. As shown in Figure&nbsp;2, there are various different types of colour palettes that are in colour harmony, such as complementary (comprised of colours opposite each other on the wheel), analogous (three colours side by side) and triadic (three colours evenly spaced around the wheel). Note that all the colour schemes are derived from the same twelve colours, spaced evenly around a circle.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-colour-harmonies" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/colour-harmonies.jpg" class="img-fluid figure-img" alt="Six wheels each split into 12 equal segments of different colours, equally spaced round the colour wheel. Each wheel highlights two, three or four of these colours that look harmonious together."></p>
<figcaption class="figure-caption">Figure&nbsp;2: Harmonious colour combinations. Figure from <a href="https://www.widewalls.ch/magazine/color-theory-basics-elements-color-wheel">https://www.widewalls.ch/magazine/color-theory-basics-elements-color-wheel</a>.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="colour-spaces" class="level3">
<h3 class="anchored" data-anchor-id="colour-spaces">Colour spaces</h3>
<section id="rgb-hsb-and-hsl" class="level4">
<h4 class="anchored" data-anchor-id="rgb-hsb-and-hsl">RGB, HSB and HSL</h4>
<p>Another aspect of colour theory relates to colour spaces, and different ways that colours can be defined. The best known, at least in the context of designing for the web, is RGB (<strong>R</strong>ed <strong>G</strong>reen <strong>B</strong>lue), which defines a colour by how much of each of those three primary colours it contains, in a range of 0-255. It is the hexidecimal representations of these three numbers that combine to make up the hex code for a colour.</p>
<p>More intuitive, however, for adjusting colours, is defining them by HSB (<strong>H</strong>ue, <strong>S</strong>aturation, <strong>B</strong>rightness), also known as HSV (<strong>H</strong>ue, <strong>S</strong>aturation, <strong>V</strong>alue). HSB is a simple transformation of the RGB space. Similar to HSB is HSL (<strong>H</strong>ue, <strong>S</strong>aturation, <strong>L</strong>ightness), though HSL is considered an improved over HSB in terms of its perceptual qualities.</p>
<p>In HSB, the hue represents the colour type and is a number measured between 0 and 360°; it’s where you are on the colour wheel, ignoring how bright or intense the colour is. Saturation describes the intensity or richness of the hue, measured between 0 and 100%. 100% is the richest version of the colour and 0% is a shade of grey. Brightness measures, you guessed it, the brightness of the colour. Again, it ranges from 0 to 100%, with 0% being black and 100% being a very bright colour (here, black is not the opposite of white). Here’s an <a href="https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html">excellent article on the HSB system</a>, which also explains how it differs from HSL. The differences between HSB and HSL are also illustrated in Figure&nbsp;3.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-hsl-hsb-sliders" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/hsl-hsb-sliders.png" class="img-fluid figure-img" alt="Two sets of three colour sliders, one for HSL the other for HSB. Both have the same scale for hue. In HSL, the saturation runs from grey to bright pink. In HSB with saturation runs from white to bright pink. In HSL, the lightness runs from black to white, via the bright pink. In HSB, the Brightness runs from black to bright pink." width="1200"></p>
<figcaption class="figure-caption">Figure&nbsp;3: HSL and HSB sliders for the pink used throughout this site. Image is a screenshot from <a href="http://colorizer.org">http://colorizer.org</a>.</figcaption>
</figure>
</div>
</div>
</div>
<p>It’s great to play around with an HSL or HSB colour wheel to get a sense of how harmonious colour schemes are built, and how the colours in them relate to each other on the wheel. I really like the <a href="https://www.canva.com/colors/color-wheel/">canva colour wheel</a>. It’s pretty simple, with only a few schemes, but it’s nicely designed and easy to use, and the page explains the basics of colour theory too. It’s a fun way to start building a palette. I like how you can pull the dots around the wheel and see how the colours relate, and if you click on a colour in the palette, there are HSL sliders too. Plus, as you move colours around, the background of the page changes colour, which is a nice touch!</p>
</section>
<section id="hcl" class="level4">
<h4 class="anchored" data-anchor-id="hcl">HCL</h4>
<p>Whilst websites on colour theory for designers tend to focus on either the HSB or HSL spaces, and it’s HSB or HSL wheels/sliders that tend to be built into design and colour software and apps, both spaces suffer from a lack of perceptual uniformity. The RGB rainbow palette is <a href="https://colorspace.r-forge.r-project.org/articles/endrainbow.html">notorious</a> for this. In general, RBG/HSB/HSL palettes are not a good choice for statistical graphics and data visualisation, where colour conveys meaning. For these purposes, the HCL colour space (<strong>H</strong>ue, <strong>C</strong>hroma, <strong>L</strong>uminance) offers a much better alternative. It is much more suitable for capturing human colour perception.</p>
<p>There is an R package for working with the HCL colour space, the intuitively named <a href="https://colorspace.r-forge.r-project.org/articles/colorspace.html">{colorspace}</a> <span class="citation" data-cites="Zeileis:2020">(Zeileis et al. 2020)</span>. It has many excellent vignettes, including one about the <a href="https://colorspace.r-forge.r-project.org/articles/color_spaces.html">HCL space</a> and its perceptual superiority over other colour spaces. The package also provides <a href="https://colorspace.r-forge.r-project.org/articles/hcl_palettes.html">colour palettes</a> and <a href="https://colorspace.r-forge.r-project.org/articles/ggplot2_color_scales.html">scales for {ggplot2}</a>. There is also support for <a href="https://developer.r-project.org/Blog/public/2019/04/01/hcl-based-color-palettes-in-grdevices/">HCL palettes in base R</a>. The HCL space is also used on <a href="http://medialab.github.io/iwanthue/">I want hue</a>, a site about colours aimed at data scientists, which allows you to generate and refine palettes of optimally distinct colours.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-pink-in-hcl" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/pink-in-HCL.png" class="img-fluid figure-img" alt="A triangle of HCL space, with bright pink on the far right, transitioning towards light grey on the top left corner and black on the bottom left corner." width="785"></p>
<figcaption class="figure-caption">Figure&nbsp;4: My pink on the Luminance-Chroma plane in the HCL space. Image is a screenshot from <a href="http://hclwizard.org:3000/hclcolorpicker/">http://hclwizard.org</a>.</figcaption>
</figure>
</div>
</div>
</div>
<p>I haven’t seen the HCL space used elsewhere, at least not in the myriad of sites on colour theory for designers or colour/design apps than I use or have read when preparing my theme and this post. Perceptual uniformity is arguably more important in choosing colour palettes for data visualisation, where the colour conveys information about the data, than in picking a few colours that look good together for a syntax highlighting scheme.</p>
</section>
</section>
</section>
<section id="approach-1-colorslurp-and-hsb" class="level2">
<h2 class="anchored" data-anchor-id="approach-1-colorslurp-and-hsb">Approach 1: ColorSlurp and HSB</h2>
<section id="building-a-palette-based-on-my-pink-using-colour-theory" class="level3">
<h3 class="anchored" data-anchor-id="building-a-palette-based-on-my-pink-using-colour-theory">Building a palette based on my <span style="color:#D4006A">pink</span>, using colour theory</h3>
<p>As I discuss in Part 1 of this series, I know that I need a palette of five colours to replace the five colours used in the default syntax highlighting scheme that comes with {distill}. The problem with all the colour schemes defined in Figure&nbsp;2 is that they use a maximum of four colours. But not to worry! We know from colour theory that we can find 12 colours in harmony by taking evenly spaced colours around the HSL or HSB wheel, i.e.&nbsp;colours whose hues are 30° apart, given fixed values for saturation and brightness/lightness. Since we only need five colours, it’s sufficient to find the six colours that are 60° apart, and ignore one of them. Note that for five colours to appear harmonious, we have to respect these angles, not choose five colours that are 72° apart.</p>
<p>The main pink that I use in this site has hex <span style="background-color: #D4006A; color: white; padding:3px">#D4006A</span>. I use a great little Mac app called <a href="https://colorslurp.com">ColorSlurp</a> for building and assessing colour palettes. The basic version is free, though the pro version has great features for testing accessibility - more on that below. In ColorSlurp, I started a new palette with #D4006A as a starting point, then, making sure I was in HSB mode, found its HSB values are 330°, 100%, 83%. Leaving the S and B sliders where they are, the next colour I needed is 60° around the circle, i.e.&nbsp;at 30°, so I moved the H slider to that value and added the resulting orange to the palette. I then repeated that for 90°, 150°, 210° and 270°, giving me two shades of green, a blue and a purple. With a colour selected in ColorSlurp, you can also pull up the colour harmonies tab, , which gives quick access to some of these colours. As I only need five colours, I discarded one of the greens, keeping the one at 150°, which is complementary to the starting pink.</p>
<p>If you don’t use ColorSlurp or a similar app, there are many online options for building a palette in this way, for example <a href="http://colorizer.org">http://colorizer.org</a> (add a new color to the palette by clicking on the next square down to the right of the sliders). In both ColorSlurp and on colorizer.org, once you have defined a colour by its HSB values, you can read off the hex code, for ease of use in R.</p>
<p>At the end of this stage of the process, based purely on my pink and colour theory, my syntax highlighting palette now stood as in Figure&nbsp;5. In the HSB space, these colours all have a saturation of 100% and a brightness of 83%.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-colour-theory-palette" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index_files/figure-html/fig-colour-theory-palette-1.png" class="img-fluid figure-img" alt="A swatch of five colours, very bright and vibrant shades of pink, orange, green, blue and purple." width="624"></p>
<figcaption class="figure-caption">Figure&nbsp;5: Colours for syntax highlighting, starting from my main pink, based only on colour theory.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="adapting-for-web-accessibility" class="level3">
<h3 class="anchored" data-anchor-id="adapting-for-web-accessibility">Adapting for web accessibility</h3>
<p>As noted in <a href="../../posts/2021-05-25_custom-highlighting-distill-1/index.html">part 1</a> of this series, one key feature of the default syntax highlighting scheme for {distill} is that it is optimised for accessibility and colour contrast. According to the <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">Web Content Accessibility Guidelines</a>, at the WCAG AA (minimum contrast) level, this requires that that contrast ratio between text and background colours be at least 4.5:1 for text of 14pt+ (which is the default text size for code in {distill}). The more stringent WCAG AAA (enhanced) level requires a ratio of at least 7:1.</p>
<p>The pro version of ColorSlurp includes a contrast checker, as in Figure&nbsp;6, though there are many websites that also offer this. WebAIM (Web with Accessibility in Mind) has a very handy <a href="https://webaim.org/resources/contrastchecker/">contrast checker</a> which, like ColorSlurp, also includes sliders for adjusting the colours until the desired contrast is reached. Darkening a colour to improve contrast keeps the hue and saturation the same but reduces the brightness or lightness component (ColorSlurp uses HSB, WebAIM uses HSL).</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-colorslurp-contrast" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/contrast-check.png" class="img-fluid figure-img" alt="Comparing my pink and white in the ColorSlurp app shows a contrast of 5.24 for text 14pt+, passing the WCAG AA standard. Sliders below show that the colour can be adjusted." width="598"></p>
<figcaption class="figure-caption">Figure&nbsp;6: Contrast checking in ColorSlurp</figcaption>
</figure>
</div>
</div>
</div>
<p>The <span style="background-color: #D4006A; color: white; padding:3px">pink</span>, <span style="background-color: #006AD4; color: white; padding:3px">blue</span> and <span style="background-color: #6A00D4; color: white; padding:3px">purple</span> in the palette created above have a contrast ratio of better than 4.5:1 with the pure white background, but the <span style="background-color: #D46A00; color: black; padding:3px">orange</span> and <span style="background-color: #00D46A; color: black; padding:3px">green</span> do not.</p>
<p>My first thought was to keep the pink, blue and purple the same, and to just reduce the brightness of the orange and green until the contrast ratio was a bit better than required. In the HSB space, that gives the palette in Figure&nbsp;7.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-orange-green-less-bright" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index_files/figure-html/fig-orange-green-less-bright-1.png" class="img-fluid figure-img" alt="A swatch of five colours, very bright and vibrant shades of pink, blue and purple, with less-bright shades of orange and green." width="624"></p>
<figcaption class="figure-caption">Figure&nbsp;7: Reducing brightness in just the orange and green to achieve desired contrasts.</figcaption>
</figure>
</div>
</div>
</div>
<p>It’s not bad, but when I applied that palette as a syntax highlighting scheme, to my eye the pink, blue and purple looked a little too bright relative to the orange.</p>
<p>My next thought was to reduce the brightness on all the colours to the level of the least bright colour that passes the accessibility check (the green, at 53%). That gives the palette in Figure&nbsp;8.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-all-less-bright" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index_files/figure-html/fig-all-less-bright-1.png" class="img-fluid figure-img" alt="A swatch of five colours, less bright versions of all five colours in the original palette." width="624"></p>
<figcaption class="figure-caption">Figure&nbsp;8: Reducing brightness in all colours to the level of the green.</figcaption>
</figure>
</div>
</div>
</div>
<p>That looks way too dark for my liking. I don’t think it’s vibrant enough, and, although the colours all have good contrast against the white background, they don’t have much contrast with each other.</p>
<p>So, I settled on a compromise position. I reduced the brightness of the original pink, blue and purple from 83% to match the brightness of the accessibility-passing orange (71%), leaving only the green at a brightness of 53%, which it needs to pass the contrast check. This gives the palette in Figure&nbsp;9. To my eye, the green doesn’t appear considerably more dark/less bright than the other four colours. If anything, the greens in Figure&nbsp;5 and Figure&nbsp;8 which both have uniform brighness, look a little too bright compared to the other colours. I guess this is a result of the lack of perceptual uniformity of the HSB space.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-final-palette" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index_files/figure-html/fig-final-palette-1.png" class="img-fluid figure-img" alt="A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white." width="624"></p>
<figcaption class="figure-caption">Figure&nbsp;9: The palette I settled on for my syntax highlighting scheme.</figcaption>
</figure>
</div>
</div>
</div>
<p>I’m happy with that, and that’s the syntax highlighting scheme I’ve adopted throughout this site, despite the fact that the palette now doesn’t actually include the pink that I set out to build my scheme around! However, because of the process I’ve followed, the pink that is in the palette does tone well with the brighter pink and I think my site still has a consistent look. In the end, it was more important that all the colours in the palette looked consistent together and met accessibility guidelines.</p>
<p>I am only just beginning to learn about web accessibility, and I know my site does not yet meet all best practices, but I’m committed to improving in this area. I first became aware of the issue of web accessibility because I follow <a href="https://twitter.com/spcanelon">Silvia Canelón on twitter</a> and I highly recommend you do the same! The <a href="https://www.a11yproject.com">a11y project</a> and <a href="https://webaim.org">WebAIM</a> are great places to learn more.</p>
</section>
<section id="checking-for-colourblindness" class="level3">
<h3 class="anchored" data-anchor-id="checking-for-colourblindness">Checking for colourblindness</h3>
<p>Some visual impairments require a high colour contrast between text and background colour in order to be able to read content on the web. Another class of visual impairment worth paying attention to when designing palettes is that of colour blindness.</p>
<p><a href="https://www.njtierney.com">Nick Tierney</a> has some excellent resources about colour and colourblindness and R packages for accessing these. <a href="https://njt-monash-colour.netlify.app/#1">These comprehensive slides</a> cover what colour is and how we perceive it, colourblindness, how to check how palettes/plots appear to those with different types of colourblindness, the HCL space, the {colorspace} package and how to create your own palettes. He also has a <a href="https://www.njtierney.com/post/2020/10/15/assess-colour/">short blog post</a> on quickly assessing colour palettes to ensure they’re colourblind-friendly.</p>
<p>As recommended in the above posts, I used the <a href="https://emilhvitfeldt.github.io/prismatic/">{prismatic}</a> package by <a href="https://www.hvitfeldt.me">Emil Hvitfeldt</a> to check how my syntax highlighting palette appears to those with different types of colourblindness:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(prismatic)</span>
<span id="cb1-2">ek_highlight_colours <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5B00B6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#005BB6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#008643"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B65B00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B6005B"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_color_blindness</span>(ek_highlight_colours)</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="cell-output-display">
<div id="fig-check-colourblindness" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/check-colourblindness.png" class="img-fluid figure-img" alt="Four colour palettes. One shows my pink/orange/green/blue/purple palette as is, the other three show how that palette appears to those with deuteranopia, protanopia and tritanopia. Under all those conditions, the five colours are distinguishable." width="575"></p>
<figcaption class="figure-caption">Figure&nbsp;10: Checking my palette for how it appears to those with various types of colourblindness.</figcaption>
</figure>
</div>
</div>
</div>
<p>Thankfully, for all three main types of colourblindess, the five colours in the palette are distinguishable, so no further adjustments are necessary.</p>
</section>
</section>
<section id="approach-2-an-r-based-hcl-alternative" class="level2">
<h2 class="anchored" data-anchor-id="approach-2-an-r-based-hcl-alternative">Approach 2: An R-based HCL alternative</h2>
<p>The above sections describe the processes, both thought and practical, that I went through to derive the colour palette for my syntax highlighting scheme, and I’m happy with what I came up with. As I was deriving my scheme, I was working in ColorSlurp and only had a cursory knowledge of the differences between the HSB, HSL and HCL colour spaces.</p>
<p>However, as I was writing up this blog post, I become increasingly curious about alternative approaches I might have taken. In particular, could I have come up with a scheme that met my criteria entirely in R? Given the incredible ecosystem that R is, it should be no surprise that the answer turned out to be yes! So, below is this alternative approach, using the <a href="https://colorspace.r-forge.r-project.org">{colorspace}</a>, <a href="https://matt-dray.github.io/coloratio/">{coloratio}</a> and <a href="https://emilhvitfeldt.github.io/prismatic/">{prismatic}</a> packages. Also, whereas the previous approach is based on the HSB colour space, this one uses HCL.</p>
<section id="building-a-palette-based-on-my-pink-using-colour-theory-1" class="level3">
<h3 class="anchored" data-anchor-id="building-a-palette-based-on-my-pink-using-colour-theory-1">Building a palette based on my <span style="color:#D4006A">pink</span>, using colour theory</h3>
<p>The {colorspace} package uses the HCL color space, so the first task was to convert a hex code into its hue, chroma and luminance components, and make them available for future use, which can be done as follows:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(colorspace)</span>
<span id="cb2-2">pink <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hex2RGB</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#D4006A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gamma =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-3">pink_hcl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as</span>(pink, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polarLUV"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">pink_h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pink_hcl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H"</span>]</span>
<span id="cb2-6">pink_c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pink_hcl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>]</span>
<span id="cb2-7">pink_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pink_hcl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>]</span></code></pre></div>
</details>
</div>
<p>The function from {colorspace} that is going to do the hard work of building a palette with differing hues but constant chroma and luminance (or as close as it can in HCL space) is <a href="https://colorspace.r-forge.r-project.org/reference/hcl_palettes.html"><code>qualitative_hcl()</code></a>. By default, you give it the number of colours you want, and it works out equally spaced hues, starting at 0°. To override this default, you can give the <code>h</code> argument a start and end value, <code>c(start, end)</code>. Again, I’m going to choose six colours, 60° apart, and discard one of them.<sup>2</sup> The <code>start</code> value should be in [0, 60) and the end value should be in [300, 360). Let the hue of our starting pink be <code>pink_h</code>. Then all the colours in the palette are going to have a hue <code>pink_h + 60 * k</code> for some integer k. The following code picks the start and end values we need to pass to <code>h</code>:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">seq_60 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb3-2">pink_60 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> seq_60 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pink_h</span>
<span id="cb3-3"></span>
<span id="cb3-4">pink_h_lower <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pink_60[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>((pink_60 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> pink_60 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>))]</span>
<span id="cb3-5">pink_h_upper <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pink_60[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>((pink_60 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> pink_60 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>))]</span></code></pre></div>
</details>
</div>
<p>That’s most of the hard work. Now we build the palette:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">hcl_six <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qualitative_hcl</span>(</span>
<span id="cb4-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, </span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(pink_h_lower, pink_h_upper), </span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> pink_c, </span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">l =</span> pink_l</span>
<span id="cb4-6">) </span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="cell-output-display">
<div id="fig-hcl-six" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index_files/figure-html/fig-hcl-six-1.png" class="img-fluid figure-img" alt="A swatch of six colours in the HCL space, a brown, two greens, a blue, magenta, and my pink." width="624"></p>
<figcaption class="figure-caption">Figure&nbsp;11: Six colours, with hues approximately 60° apart and roughly equal luminance, based around my pink.</figcaption>
</figure>
</div>
</div>
</div>
<p>The only personal decision I make in this section is which of these six colours to discard. Removing the first of the greens gives me the palette in Figure&nbsp;12.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-hcl-five" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index_files/figure-html/fig-hcl-five-1.png" class="img-fluid figure-img" alt="A swatch of five colours in the HCL space, my pink, a brown, green, blue and magenta." width="624"></p>
<figcaption class="figure-caption">Figure&nbsp;12: As in the previous figure but minus a green and rearranged.</figcaption>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Update: May 27th 2021
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Since publishing this post, Achim Zeileis, the author of the {colorspace} package, got in touch with me on <a href="https://twitter.com/AchimZeileis/status/1397580619857682437">twitter</a> to offer a bit more insight into what’s going on with this palette. The <code>hcl_six</code> palette does not, as I originally stated, have constant chroma. I have corrected the text above. Not all combinations of Hue/Chroma/Luminance exist in HCL space. At the luminance of my pink (~46) not many other hues can have such high chroma (~118), as demonstrated in Figure&nbsp;13.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-hclplot" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index_files/figure-html/fig-hclplot-1.png" class="img-fluid figure-img" alt="A partially filled colour wheel for a luminance of 47 in HCL space, showing hues of orange, red and purple with high chroma, but with no greens or yellows of high chroma." width="672"></p>
<figcaption class="figure-caption">Figure&nbsp;13: Hues and Chromas in HCL space at the Luminance of my pink</figcaption>
</figure>
</div>
</div>
</div>
<p><code>qualitative_hcl()</code> struggles in such circumstances, though does try to keep the luminance of the palette constant.</p>
</div>
</div>
</div>
</section>
<section id="adapting-for-web-accessibility-1" class="level3">
<h3 class="anchored" data-anchor-id="adapting-for-web-accessibility-1">Adapting for web accessibility</h3>
<p>When I was developing my scheme, I used my trusted ColorSlurp app to adjust colours to ensure they met WCAG standards of web accessibility. In writing up this post, I since learnt about web resources to do the same (e.g.&nbsp;<a href="https://webaim.org/resources/contrastchecker/">WebAIM contrast checker</a>) and now, for this section, I’ve discovered the <a href="https://github.com/matt-dray/coloratio">{coloratio}</a> by <a href="https://www.matt-dray.com">Matt Dray</a> and <a href="https://github.com/feddelegrand7/savonliquide">{savonliquide}</a> by <a href="https://ihaddadenfodil.com">Mohamed El Fodil Ihaddaden</a> packages that can do this in R.</p>
<p>Both packages have much to recommend them. {savonliquide} has the advantage of being on CRAN, and provides a toolbox that allows the user to implement accessibility-related concepts, including, but not limited to, contrast checking. {coloratio} is GitHub only, and only for contrast checking, but it has some additional functionality in that area above {savonliquide}, such as quick plotting of the colours in contrast, and a function, <code>cr_choose_bw()</code> that chooses which of black or white has the better contrast ratio with a user supplied colour (which, incidentally, I use to automatically choose the text colour when highlighting words with different background colours, e.g.&nbsp;<span style="background-color: #D4006A; color: white; padding:3px">#D4006A</span> vs <span style="background-color: #00D46A; color: black; padding:3px">#00D46A</span>).<sup>3</sup></p>
<p>Below, I use the <code>cr_get_ratio</code> function from <code>coloratio</code> to check the colour contrasts of each colour in the palette. Because it’s not vectorised, I use this in conjunction with <code>map2_dbl</code> from <a href="https://purrr.tidyverse.org">{purrr}</a> to get all the contrasts at once.</p>
<p>If any of the contrasts are less than 4.5, I then call on the <code>darken()</code> function from {colorspace}, which adjusts each colour in the palette to make it, you guessed it, a bit darker, therefore improving the contrast ratio. I loop over these checking and darkening iterations until all colours in the palette have a contrast ratio of at least 4.5:1 compared to white. Here is the code that achieves this:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(coloratio)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb5-3"></span>
<span id="cb5-4">palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hcl_six[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb5-5">contrasts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2_dbl</span>(</span>
<span id="cb5-6">    palette, </span>
<span id="cb5-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb5-8">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cr_get_ratio</span>(.x, .y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-9">  )</span>
<span id="cb5-10">min_contrast <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span></span>
<span id="cb5-11">any_too_light <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(contrasts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> min_contrast)</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (any_too_light) {</span>
<span id="cb5-14">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">darken</span>(palette, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb5-15">  contrasts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2_dbl</span>(</span>
<span id="cb5-16">      palette, </span>
<span id="cb5-17">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb5-18">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cr_get_ratio</span>(.x, .y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-19">    )</span>
<span id="cb5-20">  any_too_light <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(contrasts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> min_contrast)</span>
<span id="cb5-21">}</span></code></pre></div>
</details>
</div>
<p>At the end of the process, the palette looks like this:</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-hcl-darkened" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index_files/figure-html/fig-hcl-darkened-1.png" class="img-fluid figure-img" alt="A swatch of five colours, pink, brown, green, blue, magenta, all slightly darker than in the previous figure." width="624"></p>
<figcaption class="figure-caption">Figure&nbsp;14: An HCL palette where all colours have a contrast ratio of 4.5:1 or better against white.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="checking-for-colourblindness-1" class="level3">
<h3 class="anchored" data-anchor-id="checking-for-colourblindness-1">Checking for colourblindness</h3>
<p>As before, we use {prismatic} to check how the palette appears to those with various types of colourblindess. Whilst R can help us visualise this, we still need to use our judgement as to whether the output is acceptable. I believe, in Figure&nbsp;15, it is.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-hcl-darkened-colourblind" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/hcl-darkened-colourblind.png" class="img-fluid figure-img" alt="Four colour palettes. One shows the darkened HCL palette from the previous post as is, the other three show how that palette appears to those with deuteranopia, protanopia and tritanopia. Under all those conditions, the five colours are distinguishable." width="561"></p>
<figcaption class="figure-caption">Figure&nbsp;15: Checking how the darkened HCL palette appears to those with various types of colourblindness.</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="but-do-i-like-it" class="level3">
<h3 class="anchored" data-anchor-id="but-do-i-like-it">But, do I like it?</h3>
<p>Going through the process of building a colour palette that meets my criteria purely in R, in as automated, reproducible and adaptable way as possible has been a great learning experience for me, and hopefully something that will be useful to others. I don’t much like the palette it produced, though, especially in comparison to the one I came up with previously. Although the HCL-based palette probably has slightly better theoretical perceptual qualities, I prefer the vibrancy of the colours in the palette I came up with using my first approach, and that’s the one I’ve adopted on this site.</p>
</section>
</section>
<section id="back-to-part-1" class="level2">
<h2 class="anchored" data-anchor-id="back-to-part-1">Back to part 1</h2>
<p>Now that I have chosen my colour palette, head back to <a href="../../posts/2021-05-25_custom-highlighting-distill-1/index.html">part 1</a> for details of how to modify the default {distill} syntax highlighting theme to incorporate them, and how to apply the custom theme to a {distill} site.</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-03-08 16:13:48 GMT</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2021-05-26_custom-highlighting-distill-2/index.qmd" target="_blank">source code</a>, <a href="https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2021-05-26_custom-highlighting-distill-2/renv.lock" target="_blank">R environment</a></p>
</div></section><section id="session-info" class="level5 appendix"><h2 class="anchored quarto-appendix-heading">Session info</h2><div class="quarto-appendix-contents">

<details>
<summary>
Toggle
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.2 (2022-10-31)
 os       macOS Ventura 13.2.1
 system   aarch64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Europe/London
 date     2023-03-08
 pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)
 quarto   1.3.250 @ /usr/local/bin/quarto

─ Packages ───────────────────────────────────────────────────────────────────
 ! package     * version    date (UTC) lib source
 P coloratio   * 0.0.0.9004 2023-03-03 [?] Github (matt-dray/coloratio@852ac49)
 P colorspace  * 2.0-3      2022-02-21 [?] CRAN (R 4.2.0)
 P ggplot2     * 3.3.6      2022-05-03 [?] CRAN (R 4.2.0)
 P htmltools   * 0.5.3      2022-07-18 [?] CRAN (R 4.2.0)
 P purrr       * 0.3.5      2022-10-06 [?] CRAN (R 4.2.0)
 P sessioninfo * 1.2.2      2021-12-06 [?] CRAN (R 4.2.0)

 [1] /private/var/folders/xf/jb2591gj41xbj0c4y2d8_7ch0000gn/T/Rtmpx0pvGZ/renv-library-2b477c0fe600
 [2] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20
 [3] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/sandbox/R-4.2/aarch64-apple-darwin20/fd29d0b8

 P ── Loaded and on-disk path mismatch.

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</details>


<!-- -->


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-Zeileis:2020" class="csl-entry">
Zeileis, Achim, Jason C. Fisher, Kurt Hornik, Ross Ihaka, Claire D. McWhite, Paul Murrell, Reto Stauffer, and Claus O. Wilke. 2020. <span>“<span class="nocase">colorspace</span>: A Toolbox for Manipulating and Assessing Colors and Palettes.”</span> <em>Journal of Statistical Software</em> 96 (1): 1–49. <a href="https://doi.org/10.18637/jss.v096.i01">https://doi.org/10.18637/jss.v096.i01</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>If you’d like to see the original theme in action, you can see it over at the <a href="https://distillery.rbind.io/posts/2021-05-26-custom-syntax-highlighting-for-distill-part-2-creating-the-palette/">distillery</a>.↩︎</p></li>
<li id="fn2"><p>Again, I want to stress that this 60° apart approach and discard one is NOT something you should do when building a five-colour palette for a data visualisation. There, where the colours mean something in relation to the data, it’s important that the hues are evenly spaced. Even for qualitative data, the perceptual uniformity of five evenly-spaced colours is preferable. However, for a syntax highlighting scheme, where any of the colours can appear next to any of the others, and we want all pairs to look good together, and the colours convey no meaning, based on my current and still somewhat limited knowledge of colour theory, I think the six-at-sixty-degrees-discard-one approach is preferable (though I could probably be persuaded otherwise if anyone has a compelling case for an evenly-spaced 5 colours in this context too).↩︎</p></li>
<li id="fn3"><p>Since switching my website to Quarto, I have found out about the <a href="https://emilhvitfeldt.github.io/prismatic/reference/best_contrast.html"><code>best_contrast</code></a> function from {prismatic} that I will use instead of <code>cr_choose_bw</code> in future, since it allows us to specify the colours to contrast against, useful for me now that I am using very dark gray and very pale gray instead of black and white.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kaye2021,
  author = {Kaye, Ella},
  title = {Custom Syntax Highlighting for \{Distill\} Part 2},
  date = {2021-05-26},
  url = {https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kaye2021" class="csl-entry quarto-appendix-citeas">
Kaye, Ella. 2021. <span>“Custom Syntax Highlighting for {Distill} Part
2.”</span> May 26, 2021. <a href="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2">https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2</a>.
</div></div></section></div> ]]></description>
  <category>distill</category>
  <category>colour</category>
  <category>accessibility</category>
  <category>R</category>
  <guid>https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/index.html</guid>
  <pubDate>Tue, 25 May 2021 23:00:00 GMT</pubDate>
  <media:content url="https://ellakaye.co.uk/posts/2021-05-26_custom-highlighting-distill-2/ek-syntax-highlighting-palette.png" medium="image" type="image/png" height="88" width="144"/>
</item>
<item>
  <title>Custom syntax highlighting for {distill} part 1</title>
  <dc:creator>Ella Kaye</dc:creator>
  <link>https://ellakaye.co.uk/posts/2021-05-25_custom-highlighting-distill-1/index.html</link>
  <description><![CDATA[ 




<div class="top-callout callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Update: August 2022
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Since this post was originally written, I have replaced my {disill} website with this one built with <a href="https://quarto.org">Quarto</a>.</p>
<p><code>arrow</code> is the default syntax highlighting theme for Quarto, as it was for {distill}, although it is implemented slightly differently here, and the process of modifying it for Quarto is not the same as it was before. I’ll lay out the differences in a future post. Moreover, as a result, the highlighting you’ll see below is not quite the same as it appeared on my previous site, and if you’re reading this in dark mode, it’s a whole different scheme again.<sup>1</sup> That said, I am keeping this post otherwise as was on the blog for posterity.</p>
</div>
</div>
</div>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>The <a href="https://rstudio.github.io/distill/">{distill}</a> package for R can be used to build easy-to-maintain websites written only in R Markdown, such as this one.<sup>2</sup></p>
<p>I wrote a function to modify the default syntax highlighting theme. This <code>modify_default_highlighting</code> function is now part of the <a href="https://ellakaye.github.io/distilltools">{distilltools}</a> package.</p>
<p>Here’s the function in action, to get the theme used on this site:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get distilltools, requires remotes &gt;= 2.2</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EllaKaye/distilltools"</span>) </span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(distilltools)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify_default_highlighting</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ek_syntax_highlighting"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numeric =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B6005B"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default red</span></span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strings =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#008643"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default green</span></span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">functions =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#005BB6"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default purple</span></span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">control =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5B00B6"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default blue</span></span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B65B00"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default brown</span></span>
<span id="cb1-12">)</span></code></pre></div>
</details>
</div>
<p>And here’s the theme in action:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb2-3"></span>
<span id="cb2-4">penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">long_flipper =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb2-7">      species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> flipper_length_mm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">195</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-8">      species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chinstrap"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> flipper_length_mm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-9">      species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> flipper_length_mm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">225</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-10">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb2-11">    )</span>
<span id="cb2-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">long_bill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb2-15">      species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> bill_length_mm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-16">      species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chinstrap"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> bill_length_mm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-17">      species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> bill_length_mm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-18">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb2-19">    )</span>
<span id="cb2-20">  )</span></code></pre></div>
</details>
</div>
<p>This is the first in a series of two posts on implementing a custom syntax highlighting theme for a website or blog built with {distill}. Read on here for why and how this function was built, what it does and doesn’t do, and its inclusion in the <a href="https://github.com/EllaKaye/distilltools">{distilltools}</a> package. This post also outlines the criteria that were important to me when choosing colours for my theme, but take a look at part 2, <a href="../../posts/2021-05-26_custom-highlighting-distill-2/index.html">Custom syntax highlighting for {distill}: Creating the palette</a>, for a deep dive into considerations about colour choices, in respect to both colour theory and accessibility, and how I ensured my criteria were met.</p>
</section>
<section id="but-first-the-default" class="level2">
<h2 class="anchored" data-anchor-id="but-first-the-default">But first, the default</h2>
<section id="in-praise-of-the-default" class="level3">
<h3 class="anchored" data-anchor-id="in-praise-of-the-default">In praise of the default</h3>
<p>Before I delve into how to create a custom syntax highlighting scheme, I want to take a minute to admire the default. The authors of {distill}, in particular <a href="https://alison.rbind.io">Alison Hill</a>, have thought and worked hard to ensure that {distill} provides a good user experience, both for the site’s author AND for those reading it. One of the key considerations for the latter is a default syntax highlighting scheme with colours that are optimised for accessibility and colour contrast. I say more about what that means below and in <a href="../../posts/2021-05-26_custom-highlighting-distill-2/index.html">part 2</a>. Also, it appears that the colours in the scheme work well together, and overall, on the many {distill} websites where I’ve seen the scheme used, I think it looks really good! For a great example of the default in action, check out this <a href="https://themockup.blog/posts/2021-03-07-creating-a-custom-gt-function-for-aligning-first-row-text-and-testing-it-with-testthat/">code-chunk-heavy post</a> by <a href="https://twitter.com/thomas_mock">Tom Mock</a>.</p>
</section>
<section id="so-why-change" class="level3">
<h3 class="anchored" data-anchor-id="so-why-change">So, why change?</h3>
<p>When I used the default syntax highlighting theme on my site I found, to my eye, that the red used for numeric variables clashed with the <span style="background-color: #D4006A; color: white; padding:3px">bright pink</span> (closest <a href="https://chir.ag/projects/name-that-color/#D4006A">colour name</a> “razzmatazz”) I’ve used in my logo and elsewhere throughout the site. So, I decided to tweak the default theme swapping the red for my pink and, to match it, more vibrant versions of the remaining colours.</p>
</section>
<section id="distillpandoc-documentation" class="level3">
<h3 class="anchored" data-anchor-id="distillpandoc-documentation">Distill/pandoc documentation</h3>
<p>My first task was to find out whether this was possible, and if, so, how. Thankfully, the {distill} documentation contains a section on <a href="https://rstudio.github.io/distill/#syntax-highlighting">syntax highlighting</a>, showing that there is an option to give <code>distill_article</code> a path to a custom <code>.theme</code> file. The <a href="https://pandoc.org/MANUAL.html#syntax-highlighting">linked pandoc documentation on syntax highlighting</a> demonstrates how to use pandoc in the command line to save a personal version of the <code>pygments</code> highlighting theme. The documentation points out that that copy of the pygments <code>.theme</code> file can then be edited to create a custom theme.</p>
</section>
<section id="finding-and-saving-the-default" class="level3">
<h3 class="anchored" data-anchor-id="finding-and-saving-the-default">Finding and saving the default</h3>
<p>Once I had a general strategy of copying and editing an existing <code>.theme</code> file, my next task was to find the <code>.theme</code> file for the default used in {distill}, because that’s what I’d already decided to take as my starting point.</p>
<p>I cloned the <a href="https://github.com/rstudio/distill">distill repo from GitHub</a> and opened it in RStudio.<sup>3</sup> From there I began my detective work with one of my favourite RStudio features, ‘Find in Files’ (⇧ + ⌘ + F on a Mac), which searches across all files in a project. I searched for “highlight” and followed various trails until I discovered that the default is called <code>arrow.theme</code> and is stored in <code>inst/rmarkdown/templates/distill_article/resources/</code>. Thankfully, because it’s in the <code>inst</code> folder, the file is accessible to users who have the {distill} package installed. In the RStudio project for my website, I created a new script, <code>syntax_highlighting.R</code>, in the <code>R</code> folder I have in my root directory, then I ran the following to save a copy of <code>arrow.theme</code> into my website’s root directory:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">arrow_theme_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(</span>
<span id="cb3-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rmarkdown/templates/distill_article/resources/arrow.theme"</span>, </span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distill"</span></span>
<span id="cb3-4">)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.copy</span>(arrow_theme_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arrow.theme"</span>)</span></code></pre></div>
</details>
</div>
<p>When I had run that once, I commented out the above lines. I don’t want any future changes in <code>arrow.theme</code> in {distill} to break what I do next.</p>
</section>
<section id="closer-inspection-of-the-default" class="level3">
<h3 class="anchored" data-anchor-id="closer-inspection-of-the-default">Closer inspection of the default</h3>
<p>From there I could open up my copy of the <code>arrow.theme</code> file and manually inspect it. I use a great Mac app for building colour palettes, <a href="https://colorslurp.com">ColorSlurp</a>.<sup>4</sup> The basic version is free, though the pro version has useful features for testing accessibility - more on that in <a href="../../posts/2021-05-26_custom-highlighting-distill-2/index.html">part 2</a>. I set up a new palette in ColorSlurp and, for each hex colour code I encountered, I saved it there.</p>
<p>There are 29 types of <code>text-styles</code> in the theme, of which:</p>
<ul>
<li><p>8 are assigned a grey, <span style="background-color: #5E5E5E; color: white; padding:3px">#5E5E5E</span>, things like <code>Comment</code> and <code>Documentation</code></p></li>
<li><p>1 is off-black, <span style="background-color: #111111; color: white; padding:3px">#111111</span>, <code>Variable</code></p></li>
<li><p>3 are blue, <span style="background-color: #007BA5; color: white; padding:3px">#007BA5</span>, <code>Other</code>, <code>ControlFlow</code> and <code>Keyword</code></p></li>
<li><p>4 are green, <span style="background-color: #20794D; color: white; padding:3px">#20794D</span>, corresponding to various types of string</p></li>
<li><p>1 is purple, <span style="background-color: #4758AB; color: white; padding:3px">#4758AB</span>, <code>Function</code></p></li>
<li><p>7 are red, <span style="background-color: #AD0000; color: white; padding:3px">#AD0000</span>, a mix of numeric (e.g.&nbsp;<code>BaseN</code>, <code>Float</code>) and things like <code>Alert</code> and <code>Error</code></p></li>
<li><p>1 is a brown, <span style="background-color: #8F5902; color: white; padding:3px">#8F5902</span>, for <code>Constant</code></p></li>
<li><p>4 types are not assigned a colour - they are left as <code>null</code></p></li>
</ul>
<p>I was happy to stick with the groupings, grey, off-black and <code>null</code> in the default, so now I knew I had to pick five colours for my theme.</p>
</section>
</section>
<section id="building-my-own-palette" class="level2">
<h2 class="anchored" data-anchor-id="building-my-own-palette">Building my own palette</h2>
<p>I had four criteria for building a colour palette to use for my syntax highlighting theme:</p>
<ul>
<li>It be based on the <span style="color:#D4006A">pink</span> that I use in my logo and elsewhere throughout this site</li>
<li>It uses colour theory to pick colours that look appealing together</li>
<li>It meets <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">WCAG web accessibility guidelines</a>, by ensuring sufficient colour contrast, i.e.&nbsp;a ratio of 4.5:1, between each of the colours in the theme and this site’s background colour (white)</li>
<li>The colours in the palette are colourblind-friendly, i.e.&nbsp;still distinguishable to people with various difference types of colourblindness.</li>
</ul>
<p>I was originally going to write up how I went about building such a palette, both in terms of the thought process and tools used, as part of this post, but it was getting a little long<sup>5</sup>, so I’ve spun it out into a separate post, <a href="../../posts/2021-05-26_custom-highlighting-distill-2/index.html">Custom syntax highlighting for {distill} part 2: Creating the palette</a>.</p>
<p>At the end of the process, the palette for my syntax highlighting scheme is as in Figure&nbsp;1.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-final-palette-light" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://ellakaye.co.uk/posts/2021-05-25_custom-highlighting-distill-1/index_files/figure-html/fig-final-palette-light-1.png" class="img-fluid figure-img" alt="A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white." width="624"></p>
<figcaption class="figure-caption">Figure&nbsp;1: The palette I settled on for my syntax highlighting scheme.</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell dark-mode">

</div>
</section>
<section id="modifying-arrow.theme" class="level2">
<h2 class="anchored" data-anchor-id="modifying-arrow.theme">Modifying <code>arrow.theme</code></h2>
<p>With all the pieces in place, it’s now just a case of swapping out the default colour codes for our own choices. Although it’s possible to manually edit the <code>arrow.theme</code> file we now have in our directory, to aid reproducibility, and with a view to writing this up as a function, I edited it using R code instead. I read in the file, substituted the hex codes, then saved the resulting theme into a new <code>ek_syntax_highlighting.theme</code> file (leaving <code>arrow.theme</code> unchanged). Below are two approaches, one using base R, the other in the tidyverse, that I put in my <code>syntax_highlighting.R</code> script.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the default theme</span></span>
<span id="cb4-2">theme <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arrow.theme"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base R approach</span></span>
<span id="cb4-5">theme <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#AD0000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B6005B"</span>, theme) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># red -&gt; pink</span></span>
<span id="cb4-6">theme <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f5902"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B65B00"</span>, theme) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># brown -&gt; brown </span></span>
<span id="cb4-7">theme <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#007BA5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5B00B6"</span>, theme) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blue -&gt; purple</span></span>
<span id="cb4-8">theme <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#20794D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B65B00"</span>, theme) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># green -&gt; green</span></span>
<span id="cb4-9">theme <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4758AB"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#005BB6"</span>, theme) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># purple -&gt; blue</span></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alternatively, tidyverse approach</span></span>
<span id="cb4-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(magrittr)</span>
<span id="cb4-14"></span>
<span id="cb4-15">theme <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arrow.theme"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-16">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#AD0000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B6005B"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># red -&gt; pink</span></span>
<span id="cb4-17">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f5902"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B65B00"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># brown -&gt; brown </span></span>
<span id="cb4-18">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#007BA5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5B00B6"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blue -&gt; purple</span></span>
<span id="cb4-19">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#20794D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#008643"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># green -&gt; green</span></span>
<span id="cb4-20">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4758AB"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#005BB6"</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># purple -&gt; blue</span></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save new theme</span></span>
<span id="cb4-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(theme, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ek_syntax_highlighting.theme"</span>)</span></code></pre></div>
</details>
</div>
<p>I now have the file <code>ek_syntax_highlighting.theme</code> in my root directory, with my colour choices.</p>
<p>It is, of course, possible to modify it further, either manually or by making further substutions in the code above. There is a quirk, though: if I swap one of the default hex codes for my own colour choice, that implements just fine, but if I swap any of the <code>null</code>s for a colour, that doesn’t show up when I apply the theme.</p>
</section>
<section id="wrapping-in-a-distilltools-function" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-in-a-distilltools-function">Wrapping in a {distilltools} function</h2>
<p>When I figure out code to do something that I think I might want to do again, or think others might find useful, I generally like to write it up as a function, and that’s what I’ve done with the above, wrapping it in a function called <code>modify_default_highlighting</code> and putting it in the <a href="https://ellakaye.github.io/distilltools">{distilltools}</a> package. {distilltools} is in the very early stages of development, an (expanding) collection of tools to support the creation and styling of content on websites created using {distill}.</p>
<p>When I first announced the package, I included in the ‘future functionality’ section of the package README the intention to add a <code>create_highlight_theme</code> function. I don’t think what I’ve done is quite versatile or fully-featured enough to warrant that name. Instead, I called it <code>modify_default_highlighting</code> because that’s all it does, allowing you to swap out the five colours in the default scheme for five colours of your choosing. It does, however, create a <code>.theme</code> file in your working directory, that can be further edited manually, or with your own R code, if further modifications are desired.</p>
<p>The first argument to <code>modify_default_highlighting</code> is <code>name</code>, the name you want to give your theme (which will create the file <code>name.theme</code>). It then takes five colour arguments, which can be specified either in the hex form “#RRGGBB” or as a named colour, from the colour names in <a href="https://rdrr.io/r/grDevices/colors.html">grDevices::colors()</a>. For a list of the colour names available in R, see page 3 of the <a href="https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf">R color cheatsheet</a> for a one page summary, or <a href="http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf">Colors in R</a> for a slightly less visually overwhelming list. The final argument, <code>overwrite</code> (defaults to <code>TRUE</code>) specifies whether to overwrite <code>name.theme</code> if it already exists in the working directory. Here’s the function in action again, this time using colour names (note that I have not tested the visual properties of this as a palette, just dropped in some colour names into the function):</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(distilltools)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify_default_highlighting</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ek_syntax_highlighting"</span>,</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numeric =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deeppink"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default red</span></span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strings =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forestgreen"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default green</span></span>
<span id="cb5-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">functions =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkorchid3"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default purple</span></span>
<span id="cb5-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">control =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"royalbkue3"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default blue</span></span>
<span id="cb5-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkorange1"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replaces the default brown</span></span>
<span id="cb5-9">)</span></code></pre></div>
</details>
</div>
</section>
<section id="using-the-theme" class="level2">
<h2 class="anchored" data-anchor-id="using-the-theme">Using the theme</h2>
<p>Once you have you custom <code>.theme</code> file, you’ll want to apply it to your site. According to the <a href="https://rstudio.github.io/distill/#syntax-highlighting">{distill} documentation</a>, you can apply a syntax highlighting theme with the following YAML:</p>
<pre><code>---
output:
  distill::distill_article:
    highlight: my_highlighting.theme
---  </code></pre>
<p>Here, the available options for <code>highlight</code> include <code>default</code>, <code>rstudio</code> (the default RStudio editor theme), and the <code>haddock</code>, <code>kate</code>, <code>monochrome</code>, <code>pygments</code> and <code>tango</code> <a href="https://www.garrickadenbuie.com/blog/pandoc-syntax-highlighting-examples/">pandoc highlighting themes</a>. Also, most importantly for us, it can also take the path to a <code>.theme</code> file.</p>
<p>Presumably, we should be able to add this to our <code>_site.yml</code> file to have the theme apply site-wide (though note you’ll have to rebuild the site and re-knit any posts where you want to it apply). However, that’s not working for me. I have raised an <a href="https://github.com/rstudio/distill/issues/370">issue</a> about it. If you face the same problem, it would be helpful if you could comment there too.</p>
<p>There is a workaround, though, which is that the above YAML can also be included in individual .Rmd articles, in which case the theme applies just fine, though note that if your <code>.theme</code> file is in you root directory, you’ll need to give the full path to it.<sup>6</sup> And if it sounds like a bit of a pain to have to add that every time you write a new post, consider creating a template for your posts, including those lines, and then starting new posts with the {distilltools} function <a href="https://ellakaye.github.io/distilltools/reference/create_post_from_template.html"><code>create_post_from_template()</code></a>.<sup>7</sup></p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2022-11-13 11:43:53 GMT</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2021-05-25_custom-highlighting-distill-1/index.qmd" target="_blank">source code</a>, <a href="https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2021-05-25_custom-highlighting-distill-1/renv.lock" target="_blank">R environment</a></p>
</div></section><section id="session-info" class="level5 appendix"><h2 class="anchored quarto-appendix-heading">Session info</h2><div class="quarto-appendix-contents">

<details>
<summary>
Toggle
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.1 (2022-06-23)
 os       macOS Monterey 12.6.1
 system   aarch64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Europe/London
 date     2022-11-13
 pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)
 quarto   1.2.247 @ /usr/local/bin/quarto

─ Packages ───────────────────────────────────────────────────────────────────
 ! package     * version    date (UTC) lib source
 P coloratio   * 0.0.0.9004 2022-10-23 [?] Github (matt-dray/coloratio@852ac49)
 P ggplot2     * 3.3.6      2022-05-03 [?] CRAN (R 4.2.0)
 P htmltools   * 0.5.3      2022-07-18 [?] CRAN (R 4.2.0)
 P sessioninfo * 1.2.2      2021-12-06 [?] CRAN (R 4.2.0)

 [1] /private/var/folders/xf/jb2591gj41xbj0c4y2d8_7ch0000gn/T/RtmpRPolvI/renv-library-682552373a24
 [2] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20
 [3] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library

 P ── Loaded and on-disk path mismatch.

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</details>


<!-- -->

</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>If you’d like to see the original theme in action, you can see it over at the <a href="https://distillery.rbind.io/posts/2021-05-25-custom-syntax-highlighting-for-distill-part-1-modifying-the-default-theme/">distillery</a>.↩︎</p></li>
<li id="fn2"><p>For more on resources and inspirations for setting up a {distill} website, see my previous post, <a href="../../posts/2021-05-08_welcome-distill/index.html">Welcome to my {distill} website</a>.↩︎</p></li>
<li id="fn3"><p>From RStudio, go to ‘File’ in the menu bar, then ‘New Project…’ Chose ‘Version Control’, then ‘Git’, then enter <code>https://github.com/rstudio/distill.git</code> as the ‘Repository URL:’ and click ‘Create Project’↩︎</p></li>
<li id="fn4"><p>I don’t have experience of colour apps on other operating systems, but a quick search for ColorSlurp alternatives suggest there are <a href="https://alternativeto.net/software/colorslurp/">a bunch to pick from</a>.↩︎</p></li>
<li id="fn5"><p>As part of the process of writing the post, I learnt much more about colour theory, and alternatives to the approach that I had originally taken, and I wanted to share it all!↩︎</p></li>
<li id="fn6"><p>If you happen to inspect the source code for this post, you might notice that I have copied <code>ek_syntax_highlighting.theme</code> into the directory. This is <em>not</em> necessary for my site (using the full path to the <code>.theme</code> folder in my root directory is sufficient). However, I needed to do this to get the theme to show in the version of this post in the <a href="https://distillery.rbind.io">distillery</a>.↩︎</p></li>
<li id="fn7"><p>Note that the <code>create_post_from_template()</code> function is likely to get wrapped into {distill} itself, or its functionality included in <code>distill::create_post()</code>, and will be depreciated from {distilltools} if so. (I have had some discussion with the {distill} team about this and will be submitting a PR in the near future.)↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kaye2021,
  author = {Kaye, Ella},
  title = {Custom Syntax Highlighting for \{Distill\} Part 1},
  date = {2021-05-25},
  url = {https://ellakaye.co.uk/posts/2021-05-25_custom-highlighting-distill-1},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kaye2021" class="csl-entry quarto-appendix-citeas">
Kaye, Ella. 2021. <span>“Custom Syntax Highlighting for {Distill} Part
1.”</span> May 25, 2021. <a href="https://ellakaye.co.uk/posts/2021-05-25_custom-highlighting-distill-1">https://ellakaye.co.uk/posts/2021-05-25_custom-highlighting-distill-1</a>.
</div></div></section></div> ]]></description>
  <category>distill</category>
  <category>distilltools</category>
  <category>colour</category>
  <category>accessibility</category>
  <category>R</category>
  <guid>https://ellakaye.co.uk/posts/2021-05-25_custom-highlighting-distill-1/index.html</guid>
  <pubDate>Mon, 24 May 2021 23:00:00 GMT</pubDate>
  <media:content url="https://ellakaye.co.uk/posts/2021-05-25_custom-highlighting-distill-1/more-theme-in-action.png" medium="image" type="image/png" height="106" width="144"/>
</item>
<item>
  <title>Welcome to my {distill} website!</title>
  <dc:creator>Ella Kaye</dc:creator>
  <link>https://ellakaye.co.uk/posts/2021-05-08_welcome-distill/index.html</link>
  <description><![CDATA[ 




<div class="top-callout callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Update: August 2022
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Since this post was originally written, I have replaced my {disill} website with this one built with <a href="https://quarto.org">Quarto</a>.</p>
<p>If you’re looking to build a new website using R (or python or Julia), I would 100% recommend Quarto over {distill}.</p>
<p>That said, I still have a soft spot for {distill} and am keeping this post on the blog for posterity.</p>
</div>
</div>
</div>
<p>Hello, and welcome to my new site, built using the <a href="https://rstudio.github.io/distill/">{distill}</a> package. Here’s why I switched from {blogdown}, and the resources and inspirations that helped me in the process.</p>
<section id="why-distill" class="level2">
<h2 class="anchored" data-anchor-id="why-distill">Why {distill}?</h2>
<p>As the documentation says, {distill} for R Markdown is a web publishing format optimised for scientific and technical communication. Recent updates to the package, particularly the ability to customise the theme through the <code>create_theme()</code> function, have made it a really appealing choice for those wanting a personalised website based only on R Markdown. The fact that {distill} is made just in R Markdown is a big win for those not wanting to go down (or, like me, looking to get away from), the Hugo route. I’d had a Hugo Academic website for four years, built on {blogdown}, and had been stung a number of times by it breaking after updates to Hugo and Hugo Academic. Last year, I switched to {hugodown}, and that helped, but I had some serious FOMO following that shift after the release of <a href="https://alison.rbind.io/post/new-year-new-blogdown/">{blogdown} v1.0</a> a few months later, with all its handy check functions. By then, anyway, I was also displeased with the shift from Hugo Academic to Wowchemy, and getting a little bored of that theme anyway. I had also started seeing more and more {distill} sites pop up from those I admire in the RStats community. I looked into it and and I loved the simplicity of it, both in looks and in management. No more impenetrable file structures! No more not being sure quite why my website is working/looking as it does! Attending <a href="https://alison.rbind.io">Alison Hill’s</a> incredible <a href="https://alison.netlify.app/ares-kind-tools/#1">‘Crafting Kind Tools’</a> talk, in which she described the care put into making the {distill} user experience an enjoyable one, was the last push I needed to start my website again (though, to be fair, that talk also described similar care put into the latest release of {blogdown}).</p>
<p>I’m finding working with {distill} to be an absolute joy!</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>This post is not a guide on how to get a {distill} site up an running. There are already great resources for that. In particular, here are the resources I found helpful.</p>
<section id="the-basics" class="level3">
<h3 class="anchored" data-anchor-id="the-basics">The basics</h3>
<ul>
<li><p>The blogpost from RStudio on <a href="https://blog.rstudio.com/2020/12/07/distill/">(Re-)introducting Distill for R Markdown</a> is a great place to start.</p></li>
<li><p>For getting up and running, the official <a href="https://rstudio.github.io/distill/">{distill} documentation</a> is excellent (and also a {distill} website).</p></li>
<li><p>Whilst we’re on resources from the RStudio team, it’s worth remembering that because {distill} is built on {rmarkdown}, <a href="https://blog.rstudio.com/2021/04/15/2021-spring-rmd-news/">recent developments to that package</a>, such as the ability to style a site with <a href="https://rstudio.github.io/sass">{sass}</a> <sup>1</sup>, and developments in {knitr}, such as the ability to easily <a href="https://blog.rstudio.com/2021/04/20/knitr-fig-alt/">add alt-text to images</a>, follow through to {distill} too.</p></li>
<li><p>There’s a great <a href="https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/">building a blog with distill</a> post from Tom Mock</p></li>
<li><p>And one on <a href="https://lisalendway.netlify.app/posts/2020-12-09-buildingdistill/">building a {distill} website</a> from Lisa Lendway</p></li>
</ul>
</section>
<section id="next-steps" class="level3">
<h3 class="anchored" data-anchor-id="next-steps">Next steps</h3>
<ul>
<li><p>The <a href="https://github.com/seankross/postcards">{postcards}</a> package from Sean Kross makes it incredibly easy to create simple, stylish, landing pages, and they make great home pages for {distill} sites. Alison Hill has a walk-through on how to set this up: <a href="https://alison.rbind.io/post/2020-12-22-postcards-distill/">M-F-E-O: postcards + distill</a></p></li>
<li><p>Tom Mock has another excellent {distill} post on <a href="https://themockup.blog/posts/2021-03-21-including-and-meta-tagging-extra-content-in-a-distill-blog/">including and meta tagging extra content in a distill blog</a>, useful for if/when you want your site to contain content other than <code>distill_articles</code></p></li>
<li><p>Whilst the <code>create_post()</code> function in {distill} is a great way to get started on a blog post, Eric Ekholm shows how he developed a function wrapped around it to <a href="https://www.ericekholm.com/posts/2021-04-02-personalizing-the-distill-template/">personalise the {distill} template</a></p></li>
<li><p>For styling content, John Helveston shows how to <a href="https://www.jhelvy.com/posts/2021-03-25-customizing-distill-with-htmltools-and-css/">customise {distill} with {htmltools} and CSS</a>.</p></li>
<li><p>If you want to allow readers to comment on your posts, then follow this guide from Vebash Naidoo on how to <a href="https://sciencificity-blog.netlify.app/posts/2021-02-20-enable-utterances-with-distill/">enable utterances with {distill}</a></p></li>
</ul>
</section>
</section>
<section id="inspirationscode" class="level2">
<h2 class="anchored" data-anchor-id="inspirationscode">Inspirations/Code</h2>
<p>I’m extremely grateful to the authors of the above posts for taking the time to write up what they’ve developed and what they know/have learnt to do, therefore making it easy for others to apply. I guess that’s what blogs are for! But I’ve also learnt a lot from finding sites that I simply like the look of, or have cool features, and looking at the source code on GitHub and adapting it for my own site. Here are some sites that I’ve drawn on for inspiration and code<sup>2</sup>:</p>
<ul>
<li>John Helveston</li>
</ul>
<p><a href="https://www.jhelvy.com" class="icon-link" target="_blank" rel="noopener"><i class="fas fa-globe"></i> site</a> <a href="https://github.com/jhelvy/jhelvy.com" class="icon-link" target="_blank" rel="noopener"><i class="fab fa-github"></i> source</a></p>
<p>I particularly like his <code>icon_link</code> buttons (as demonstrated just above), and the second collection for talks. John tells me he is turn took inspiration for this from <a href="https://emitanaka.org/">Emi Tanaka’s site</a>.</p>
<ul>
<li>Ijeamaka Anyene</li>
</ul>
<p><a href="https://ijeamaka-anyene.netlify.app/" class="icon-link" target="_blank" rel="noopener"><i class="fas fa-globe"></i> site</a> <a href="https://github.com/Ijeamakaanyene/ijeamaka-anyene" class="icon-link" target="_blank" rel="noopener"><i class="fab fa-github"></i> source</a></p>
<p>Ijeamaka has a really cool projects page, where she’s created a card for each project, which I’ve implemented on my site.</p>
<ul>
<li>Tom Mock</li>
</ul>
<p><a href="https://themockup.blog" class="icon-link" target="_blank" rel="noopener"><i class="fas fa-globe"></i> site</a> <a href="https://github.com/jthomasmock/radix_themockup" class="icon-link" target="_blank" rel="noopener"><i class="fab fa-github"></i> source</a></p>
<p>Come for the minimalist, stylish design, stay for the fantastic blog content, not just on {distill}, but also on {gt}, R Markdown, #TidyTuesday and much more besides.</p>
</section>
<section id="finding-out-more" class="level2">
<h2 class="anchored" data-anchor-id="finding-out-more">Finding out more</h2>
<p>The above just scratches the surface. There are many more great sites built on {distill} out there, and lots more ways to customise them. Below are some good ways to find out more.</p>
<section id="the-distillery" class="level3">
<h3 class="anchored" data-anchor-id="the-distillery">The distillery</h3>
<p>The <a href="https://distillery.rbind.io">distillery</a> is a {distill} blog about building {distill} blogs and websites. As the site’s GitHub README states:</p>
<blockquote class="blockquote">
<p>This site was built for the community of distill users to find ways to build and customize their sites and to inspire one another. If you have a distill website or blog, we would love to have it included in the distillery <a href="https://distillery.rbind.io/showcase.html">showcase</a>! Have a post about ways to customize or add new features to your blog? We would love to have it included on the distillery <a href="https://distillery.rbind.io/tips_and_tricks.html">tips &amp; tricks page</a>!</p>
</blockquote>
<p>The showcase is a great place to browse sites for inspiration and the tips and tricks page has loads of great resources (many of which I want to implement on my site in the future, for example Jannick Buhr’s post on <a href="https://jmbuhr.de/posts/2021-03-14-making-a-darkmode-for-your-distill-site/">making a dark mode for your {distill} site</a>).</p>
</section>
<section id="twitter" class="level3">
<h3 class="anchored" data-anchor-id="twitter">Twitter</h3>
<p>There are a number of folk who tweet about {distill} (alongside other #rstats content). I’ve seen useful tweets from Shannon Pileggi <a href="https://twitter.com/PipingHotData">@PipingHotData</a>, Lisa Lendway <a href="https://twitter.com/lisalendway">@lisalendway</a> and John Helveston <a href="https://twitter.com/JohnHelveston">@JohnHelveston</a>. And it pretty much goes without saying that anyone with an interest in {distill} should be following its authors (and general R Markdown gurus), Alison Hill <a href="https://twitter.com/apreshill">@apreshill</a>, Christophe Dervieux <a href="https://twitter.com/chrisderv">@chrisderv</a>, Rich Iannone <a href="https://twitter.com/riannone">@riannone</a> and Yihui Xie <a href="https://twitter.com/xieyihui">@xieyihui</a> (note that the author and original creator of {distill} is JJ Allaire - he does have a <a href="https://twitter.com/fly_upside_down">twitter account</a> but doesn’t seem to use it).</p>
</section>
</section>
<section id="a-sneak-peek-at-distilltools" class="level2">
<h2 class="anchored" data-anchor-id="a-sneak-peek-at-distilltools">A sneak-peek at {distilltools}</h2>
<p>Inspiried by the above-mentioned posts from John Helveston and Eric Ekholm, I’ve started working on a package, {distilltools}, a collection of tools to support the creation and styling of content on websites created using {distill}.</p>
<p><a href="https://ellakaye.github.io/distilltools/" class="icon-link" target="_blank" rel="noopener"><i class="fas fa-globe"></i> site</a> <a href="https://github.com/EllaKaye/distilltools" class="icon-link" target="_blank" rel="noopener"><i class="fab fa-github"></i> source</a></p>
<p>It is in the very early stages of development. I am actively seeking contributions - both ideas and code - to help build the package to be broadly useful to a wide variety of {distill} users. The idea is for the package to become a curated, collaborative, community-driven project. Please see the <a href="https://ellakaye.github.io/distilltools/CONTRIBUTING.html">contributing guide</a> for more details on how to get involved. In terms of relationship between packages, I hope in time that {distilltools} can be for {distill} something like what <a href="https://pkg.garrickadenbuie.com/xaringanExtra/#/">{xaringanExtra}</a> and <a href="https://pkg.garrickadenbuie.com/xaringanthemer/">{xaringanthemer}</a> are for <a href="https://github.com/yihui/xaringan">{xaringan}</a>. Some of what I have in mind may sit better within the distill package itself, and I am in touch with the {distill} team about that.</p>
<p>At the time of writing, there are just three functions:</p>
<ul>
<li><code>icon_link</code>: creates the html for a link button with icon and text (as seen above). Output of <code>icon_link</code> will need styling via the <code>icon-link</code> class to make it look like a button.</li>
<li><code>create_talk()</code>: a wrapper around <code>distill::create_post()</code> that creates a post in the talk directory and includes buttons (made with <code>icon-link()</code>) for slides (both web and pdf), material, video and project. These can easily be edited in the resulting .Rmd file.</li>
<li><code>create_post_from_template()</code>: this function operates almost identically to <code>distill::create_post()</code> except for the addition of a <code>path</code> argument, which allows the user to pass in a path to an .Rmd file that can be used as a template for the post. (Note that this function is likely going to be pulled into the {distill} package and hence be depreciated here.)</li>
</ul>
<p>Expect to hear much more from me, both on this blog and <a href="https://twitter.com/ellamkaye">twitter</a>, about {distilltools} in the near future.</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2022-11-11 21:33:56 GMT</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2021-05-08_welcome-distill/index.qmd" target="_blank">source code</a>, <a href="https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2021-05-08_welcome-distill/renv.lock" target="_blank">R environment</a></p>
</div></section><section id="session-info" class="level5 appendix"><h2 class="anchored quarto-appendix-heading">Session info</h2><div class="quarto-appendix-contents">

<details>
<summary>
Toggle
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.1 (2022-06-23)
 os       macOS Monterey 12.6.1
 system   aarch64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Europe/London
 date     2022-11-11
 pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)
 quarto   1.2.247 @ /usr/local/bin/quarto

─ Packages ───────────────────────────────────────────────────────────────────
 ! package      * version    date (UTC) lib source
 P distilltools * 0.0.0.9003 2022-08-01 [?] Github (EllaKaye/distilltools@03881a1)
 P sessioninfo  * 1.2.2      2021-12-06 [?] CRAN (R 4.2.0)

 [1] /private/var/folders/xf/jb2591gj41xbj0c4y2d8_7ch0000gn/T/Rtmp66BdZk/renv-library-234b7954f300
 [2] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20
 [3] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library

 P ── Loaded and on-disk path mismatch.

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</details>


<!-- -->

</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>When I first tried this in {distill}, I couldn’t get it working, but it seems this has been <a href="https://github.com/rstudio/distill/pull/360">patched</a> now↩︎</p></li>
<li id="fn2"><p>Update since porting this post to Quarto: some of the sites in this section have also been rewritten since this was originally posted. The links below may no longer be to {distill} sites, or may be missing the features that I attribute to them in this post.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kaye2021,
  author = {Kaye, Ella},
  title = {Welcome to My \{Distill\} Website!},
  date = {2021-05-08},
  url = {https://ellakaye.co.uk/posts/2021-05-08_welcome-distill},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kaye2021" class="csl-entry quarto-appendix-citeas">
Kaye, Ella. 2021. <span>“Welcome to My {Distill} Website!”</span> May 8,
2021. <a href="https://ellakaye.co.uk/posts/2021-05-08_welcome-distill">https://ellakaye.co.uk/posts/2021-05-08_welcome-distill</a>.
</div></div></section></div> ]]></description>
  <category>distill</category>
  <category>distilltools</category>
  <category>package development</category>
  <category>R</category>
  <guid>https://ellakaye.co.uk/posts/2021-05-08_welcome-distill/index.html</guid>
  <pubDate>Fri, 07 May 2021 23:00:00 GMT</pubDate>
  <media:content url="https://ellakaye.co.uk/posts/2021-05-08_welcome-distill/distill-logo.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Advent of Code 2020</title>
  <dc:creator>Ella Kaye</dc:creator>
  <link>https://ellakaye.co.uk/posts/2020-12-09_advent-of-code-2020/index.html</link>
  <description><![CDATA[ 




<p><a href="https://adventofcode.com">Advent of Code</a> is a series of small programming challenges, released daily throughout December in the run-up to Christmas. Part 1 of the challenge is given first. On its successful completion, Part 2 is revealed. The challenges are designed to be solved in any programming language. I will be using R.</p>
<p>There will no doubt be a wide variety of ways to solve these problems. I’m going to go with the first thing I think of that gets the right answer. In most cases, I expect that there will be more concise and efficient solutions. Most of the time I’m working in R, it’s within the <a href="https://www.tidyverse.org">tidyverse</a>, so I imagine that framework will feature heavily below.</p>
<p>Each participant gets different input data, so my numerical solutions may be different from others. If you’re not signed up for Advent of Code yourself, but want to follow along with my data, you can download it at from the data links at the beginning of each day’s section. The links in the day section headers take you to challenge on the Advent of Code page.</p>
<section id="day-1-report-repair" class="level2">
<h2 class="anchored" data-anchor-id="day-1-report-repair">Day 1: <a href="https://adventofcode.com/2020/day/1">Report Repair</a></h2>
<p>
<a id="day1"></a>
</p>
<p><a href="data/AoC_day1.txt">My day 1 data</a></p>
<section id="part-1-two-numbers" class="level4">
<h4 class="anchored" data-anchor-id="part-1-two-numbers">Part 1: Two numbers</h4>
<p>The challenge is to find two numbers from a list that sum to 2020, then to report their product.</p>
<p><code>expand.grid()</code> creates a data frame from all combinations of the supplied vectors. Since the vectors are the same, each pair is duplicated. In this case the two numbers in the list that sum to 2020 are 704 and 1316, and we have one row with 704 as Var1 and one with 704 as Var2. <code>slice(1)</code> takes the first occurrence of the pair.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"></span>
<span id="cb1-3">expenses <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day1.txt"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand.grid</span>(expenses, expenses) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sum =</span> Var1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Var2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sum <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prod =</span> Var1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Var2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(prod)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 926464</code></pre>
</div>
</div>
</section>
<section id="part-2-three-numbers" class="level4">
<h4 class="anchored" data-anchor-id="part-2-three-numbers">Part 2: Three numbers</h4>
<p>The follow-up challenge is the same but with three numbers. I went with essentially the same code but it’s notably slower. There are a lot of repeated calculations here: each triplet appears six times in the table.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand.grid</span>(expenses, expenses, expenses) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sum =</span> Var1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Var2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Var3) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sum <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prod =</span> Var1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Var2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Var3) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(prod)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 65656536</code></pre>
</div>
</div>
</section>
</section>
<section id="day-2-password-philosophy" class="level2">
<h2 class="anchored" data-anchor-id="day-2-password-philosophy">Day 2: <a href="https://adventofcode.com/2020/day/2">Password Philosophy</a></h2>
<p><a href="data/AoC_day2.txt">My day 2 data</a></p>
<section id="part-1-number-of-letters" class="level4">
<h4 class="anchored" data-anchor-id="part-1-number-of-letters">Part 1: Number of letters</h4>
<p>We need to find how many passwords are valid according to their policy. The policies and passwords are given as follows:</p>
<pre><code>1-3 a: abcde
1-3 b: cdefg
2-9 c: ccccccccc</code></pre>
<p>Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, <code>1-3 a</code> means that the password must contain <code>a</code> at least 1 time and at most 3 times.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</details>
</div>
<p>First load the libraries we’ll need. We then read in the data and use <code>tidyr</code> functions to separate out the parts of the policy and the password, making sure to convert the columns to numeric as appropriate:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">passwords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_tsv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day2.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(X1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"policy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(policy, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"letter"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(count, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(min),</span>
<span id="cb7-6">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(max))</span></code></pre></div>
</details>
</div>
<p>Next, we use the <code>stringr</code> function <code>str_count()</code> to count how many times the given letter appears in the password, and conditional logic to check whether it is repeated within the specified number of times. Because <code>TRUE</code> has a numeric value of 1 and <code>FALSE</code> has a numeric value of 0, we can sum the resulting column to get a count of how many passwords are valid according to their policies.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">passwords <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_count</span>(password, letter)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password_in_policy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> min <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> max, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">correct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(password_in_policy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(correct)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 625</code></pre>
</div>
</div>
</section>
<section id="part-2-position-of-letters" class="level4">
<h4 class="anchored" data-anchor-id="part-2-position-of-letters">Part 2: Position of letters</h4>
<p>Now the policy is interpreted differently. Each policy actually describes two positions in the password, where 1 means the first character, 2 means the second character, and so on. Exactly one of these positions must contain the given letter. How many are valid now?</p>
<p>There were a couple of <em>gotchas</em> here. When I used <code>separate()</code> in the previous part, I had inadvertently left a leading whitespace in front of the password, something that was messing up my indexing with <code>str_sub</code>. Using <code>str_trim()</code> first cleared that up. Also, we need <em>exactly one</em> of the positions to match. <code>|</code> is an inclusive or. We need <code>xor()</code> for exclusive or instead.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">passwords <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_trim</span>(password)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pos1_letter =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(password, min, min),</span>
<span id="cb10-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pos2_letter =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(password, max, max)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">match_one =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xor</span>(pos1_letter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> letter, pos2_letter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> letter)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">correct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(match_one)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(correct) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 391</code></pre>
</div>
</div>
</section>
</section>
<section id="day-3-toboggan-trajectory" class="level2">
<h2 class="anchored" data-anchor-id="day-3-toboggan-trajectory">Day 3: <a href="https://adventofcode.com/2020/day/3">Toboggan Trajectory</a></h2>
<p><a href="data/AoC_day3.txt">My day 3 data</a></p>
<section id="part-1-encountering-trees" class="level4">
<h4 class="anchored" data-anchor-id="part-1-encountering-trees">Part 1: Encountering trees</h4>
<p>Starting at the top left corner of the map, how many trees (“#”) do we encounter, going at a trajectory of 3 right and 1 down?</p>
<p>First, read in the data and save it into a matrix. My method here feels really hack-y. I’m sure there must be a better approach.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb12-2"></span>
<span id="cb12-3">tree_map <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_tsv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day3.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5">num_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree_map <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_length</span>(X1)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(length)</span>
<span id="cb12-9"></span>
<span id="cb12-10">tree_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree_map <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(X1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">split =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(X1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>()</span>
<span id="cb12-14"></span>
<span id="cb12-15">tree_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(tree_vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> num_col, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
</div>
<p>Now work my way across and down the matrix, using the <code>%%</code> modulo operator to loop round where necessary. The <code>-1</code> and <code>+1</code> in the line <code>((y + right - 1) %% num_col) + 1</code> is a hack to get round the fact that, for <code>num_col</code> columns, the modulo runs from <code>0</code> to <code>num_col - 1</code>, but the column indexes for our matrix run from <code>1</code> to <code>num_col</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb13-2">down <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-3"></span>
<span id="cb13-4">num_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(tree_mat)</span>
<span id="cb13-5">num_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(tree_mat)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start counting trees encountered</span></span>
<span id="cb13-8">trees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start square</span></span>
<span id="cb13-11">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-12">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-13">  </span>
<span id="cb13-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> num_rows) {</span>
<span id="cb13-15">  </span>
<span id="cb13-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cat("row: ", x, "col: ", y, "\n")</span></span>
<span id="cb13-17">  </span>
<span id="cb13-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (tree_mat[x,y] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>) trees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> trees <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-19">  </span>
<span id="cb13-20">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> down</span>
<span id="cb13-21">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ((y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> right <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> num_col) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-22">  </span>
<span id="cb13-23">}</span>
<span id="cb13-24"></span>
<span id="cb13-25">trees</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 299</code></pre>
</div>
</div>
</section>
<section id="part-2-checking-further-slopes" class="level4">
<h4 class="anchored" data-anchor-id="part-2-checking-further-slopes">Part 2: Checking further slopes</h4>
<p>We now need to check several other trajectories, and multiply together the number of trees we find, so we wrap the Part 1 code into a function.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">slope_check <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree_mat, right, down) {</span>
<span id="cb15-2">  </span>
<span id="cb15-3">  num_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(tree_mat)</span>
<span id="cb15-4">  num_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(tree_mat)</span>
<span id="cb15-5"></span>
<span id="cb15-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start counting trees encountered</span></span>
<span id="cb15-7">  trees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-8"></span>
<span id="cb15-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start square</span></span>
<span id="cb15-10">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-11">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-12">  </span>
<span id="cb15-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> num_rows) {</span>
<span id="cb15-14">  </span>
<span id="cb15-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (tree_mat[x,y] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>) trees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> trees <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-16">  </span>
<span id="cb15-17">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> down</span>
<span id="cb15-18">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ((y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> right <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> num_col) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-19">  </span>
<span id="cb15-20">  }</span>
<span id="cb15-21">  trees</span>
<span id="cb15-22">}</span>
<span id="cb15-23"></span>
<span id="cb15-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prod</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slope_check</span>(tree_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb15-25">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slope_check</span>(tree_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb15-26">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slope_check</span>(tree_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb15-27">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slope_check</span>(tree_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb15-28">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slope_check</span>(tree_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3621285278</code></pre>
</div>
</div>
</section>
</section>
<section id="day-4-passport-processing" class="level2">
<h2 class="anchored" data-anchor-id="day-4-passport-processing">Day 4: <a href="https://adventofcode.com/2020/day/4">Passport Processing</a></h2>
<p>
<a id="day4"></a>
</p>
<p><a href="data/AoC_day4.txt">My day 4 data</a></p>
<section id="part-1-complete-passports" class="level4">
<h4 class="anchored" data-anchor-id="part-1-complete-passports">Part 1: Complete passports</h4>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span></code></pre></div>
</details>
</div>
<p>Using <code>readr::read_tsv()</code> off the bat removes the blank lines, making it impossible to identify the different passports, but reading in the data via <code>readLines()</code> then converting <code>as_tibble()</code> preserves them, and then allows us to use <code>tidyverse</code> functions for the remaining tidying. <code>cumsum()</code> on a logical vectors takes advantage of <code>FALSE</code> having a numeric value of zero and <code>TRUE</code> having a numeric value of one.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">passports <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day4.txt"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_rows</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_passport =</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(new_passport) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>new_passport) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>new_passport) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(value, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"key"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relocate</span>(ID)</span></code></pre></div>
</details>
</div>
<p>Our data is now in three columns, with ID, key and value, so now we need to find the number of passports with all seven fields once <code>cid</code> is excluded:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">passports <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cid"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(ID) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 210</code></pre>
</div>
</div>
</section>
<section id="part-2-valid-passports" class="level4">
<h4 class="anchored" data-anchor-id="part-2-valid-passports">Part 2: Valid passports</h4>
<p>Now we need to add data validation checks:</p>
<ul>
<li>byr (Birth Year) - four digits; at least 1920 and at most 2002.</li>
<li>iyr (Issue Year) - four digits; at least 2010 and at most 2020.</li>
<li>eyr (Expiration Year) - four digits; at least 2020 and at most 2030.</li>
<li>hgt (Height) - a number followed by either cm or in:
<ul>
<li>If cm, the number must be at least 150 and at most 193.</li>
<li>If in, the number must be at least 59 and at most 76.</li>
</ul></li>
<li>hcl (Hair Color) - a # followed by exactly six characters 0-9 or a-f.</li>
<li>ecl (Eye Color) - exactly one of: amb blu brn gry grn hzl oth.</li>
<li>pid (Passport ID) - a nine-digit number, including leading zeroes.</li>
<li>cid (Country ID) - ignored, missing or not.</li>
</ul>
<p>Ignoring the <code>cid</code> field, we narrow down on passports that at least have the right number of fields, and extract the number from the <code>hgt</code> column:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">complete_passports <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> passports <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cid"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_count</span>(ID) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hgt_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb21-7">    key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hgt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_number</span>(value),</span>
<span id="cb21-8">    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span></code></pre></div>
</details>
</div>
<p>Then we create a <code>check</code> column, which is <code>TRUE</code> when the value for each key meets the required conditions. Those with 7 <code>TRUE</code>s are valid. Note that with <code>case_when()</code> we’ve left the check column as <code>NA</code> when the condition is <code>FALSE</code>, requiring <code>na.rm = TRUE</code> in the call to <code>sum()</code>. We can get round that by adding a final line to the <code>case_when()</code> condition stating <code>TRUE ~ FALSE</code>. <code>TRUE</code> here is a catch-all for all remaining rows not covered by the conditions above, and then we set them to <code>FALSE</code>, but I find the line <code>TRUE ~ FALSE</code> unintuitive.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">complete_passports <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb22-3">    (key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"byr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1920</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"byr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2002</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb22-4">    (key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iyr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2010</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iyr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb22-5">    (key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eyr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eyr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2030</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb22-6">    key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hgt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> hgt_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> hgt_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">193</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb22-7">    key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hgt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> hgt_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> hgt_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">76</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,  </span>
<span id="cb22-8">    key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hcl"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^#[a-f0-9]{6}$"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb22-9">    key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecl"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"brn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hzl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oth"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb22-10">    key <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pid"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[0-9]{9}$"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb22-11">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(ID) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check_all =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(check, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(check_all <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb22-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 131</code></pre>
</div>
</div>
</section>
</section>
<section id="day-5-binary-boarding" class="level2">
<h2 class="anchored" data-anchor-id="day-5-binary-boarding">Day 5: <a href="https://adventofcode.com/2020/day/5">Binary Boarding</a></h2>
<p><a href="data/AoC_day5.txt">My day 5 data</a></p>
<section id="part-1-finding-all-seat-ids" class="level4">
<h4 class="anchored" data-anchor-id="part-1-finding-all-seat-ids">Part 1: Finding all seat IDs</h4>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</details>
</div>
<p>The code below sets starts by setting each row number to 127 and each column number to 7, the maximum they can be, then, working along the string, lowering the maximum (or leaving it as is) one letter at a time:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">boarding <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_tsv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day5.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binary =</span> X1)</span>
<span id="cb25-3"></span>
<span id="cb25-4">seat_IDs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> boarding <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">127</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, row)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, row)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, row)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, row)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, row)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, row)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, row)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, col <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, col)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, col <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, col)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>  </span>
<span id="cb25-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(binary, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, col <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, col)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>  </span>
<span id="cb25-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col) </span>
<span id="cb25-18"></span>
<span id="cb25-19">seat_IDs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(ID)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(max)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 963</code></pre>
</div>
</div>
<p>OK, I know I said in the introduction to this post that I would go with the first solution I think of that gets the right answer, and the above does work, but I’m <em>deeply</em> unhappy with the code. There’s too much repetition, I don’t like the use of subtraction when diving by 2 feels more appropriate in a binary context, and it doesn’t feel like I’ve taken full advantage of the mathematical structure of the problem. So, on further reflection, I realise that the way that ID is defined is essentially turning a binary number into a decimal, where we get the binary number as a string by replacing “B” and “R” by “1” and L” and “F” by “0”. Then, I just found, there is a base R function <code>strtoi()</code> that takes a string of digits in a given base and converts it to a base 10 integer, just what we need:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">seat_IDs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> boarding <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binary =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(binary, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L|F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binary =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(binary, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B|R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strtoi</span>(binary, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(ID))</span>
<span id="cb27-6"></span>
<span id="cb27-7">seat_IDs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb27-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(ID)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 963</code></pre>
</div>
</div>
<p>That’s better!</p>
</section>
<section id="part-2-finding-my-seat-id" class="level4">
<h4 class="anchored" data-anchor-id="part-2-finding-my-seat-id">Part 2: Finding my seat ID</h4>
<p>We need to find the missing number, so we arrange the IDs in ascending order and look at the gap between each ID and the preceding one. In most cases, that should be one. Where we have a gap of 2, we must have skipped the integer below:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">seat_IDs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(ID) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">diff =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lag</span>(ID)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gap =</span> ID <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> diff) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(gap <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">my_seat =</span> ID <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(my_seat)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 592</code></pre>
</div>
</div>
</section>
</section>
<section id="day-6-custom-customs" class="level2">
<h2 class="anchored" data-anchor-id="day-6-custom-customs">Day 6: <a href="https://adventofcode.com/2020/day/6">Custom Customs</a></h2>
<p><a href="data/AoC_day6.txt">My day 6 data</a></p>
<section id="part-1-anyone-answers" class="level4">
<h4 class="anchored" data-anchor-id="part-1-anyone-answers">Part 1: Anyone answers</h4>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb31-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</details>
</div>
<p>Within each group, we need to find the number of unique letters within each group. We read in and separate the data using the tricks learnt for Day 4, and take advantage of the <code>rowwise()</code> feature in <code>dplyr 1.0.0</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">customs_groups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day6.txt"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_group =</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group_ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(new_group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>new_group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>new_group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group_ID) </span>
<span id="cb32-8"></span>
<span id="cb32-9">customs_groups <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">qs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">qss =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(qs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">qsu =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(qss))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(qsu)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(total)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6585</code></pre>
</div>
</div>
</section>
<section id="part-2-everyone-answers" class="level4">
<h4 class="anchored" data-anchor-id="part-2-everyone-answers">Part 2: Everyone answers</h4>
<p>Now, instead of unique letters in a group, we need to find the number of letters which appear in all the answers for everyone in the same group. I first note how many people are in each group, then tabulate the number of occurrences of each letter in the group, then count (by summing a logical vector) the number of matches between occurrences of letter and the number in group. Finally, we sum across all groups.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">customs_groups <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>  </span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_count</span>(group_ID, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_in_group"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group_ID, num_in_group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">qs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">qss =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(qs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">letter_table =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(qss))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">in_common =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(num_in_group <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> letter_table)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(in_common)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(total)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3276</code></pre>
</div>
</div>
</section>
</section>
<section id="day-7-handy-haverstocks" class="level2">
<h2 class="anchored" data-anchor-id="day-7-handy-haverstocks">Day 7: <a href="https://adventofcode.com/2020/day/7">Handy Haverstocks</a></h2>
<p><a href="data/AoC_day7.txt">My day 7 data</a></p>
<section id="part-1-number-of-colour-bags" class="level4">
<h4 class="anchored" data-anchor-id="part-1-number-of-colour-bags">Part 1: Number of colour bags</h4>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</details>
</div>
<p>We have colour-coded bags that must contain a specific number of other colour-coded bags.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">bags <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_tsv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day7.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb37-2"></span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(bags)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 1
  X1                                                                            
  &lt;chr&gt;                                                                         
1 wavy bronze bags contain 5 striped gold bags, 5 light tomato bags.            
2 drab indigo bags contain 4 pale bronze bags, 2 mirrored lavender bags.        
3 pale olive bags contain 3 faded bronze bags, 5 wavy orange bags, 3 clear blac…
4 faded white bags contain 5 vibrant violet bags, 4 light teal bags.            
5 mirrored magenta bags contain 2 muted cyan bags, 3 vibrant crimson bags.      
6 dull purple bags contain 1 striped fuchsia bag.                               </code></pre>
</div>
</div>
<p>Our first task is to parse the natural language and split the rules into one container/contains pair per line:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">rules <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bags <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rule =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(X1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"container"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contains"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" bags contain "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_rows</span>(contains, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contains =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span>(contains, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contains =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span>(contains, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bags|bag"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#mutate(contains = str_replace(contains, "no other", "0 other")) %&gt;%</span></span>
<span id="cb39-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract</span>(contains, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contains'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+) (.+)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(number)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contains =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_trim</span>(contains)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">number =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(number)) </span></code></pre></div>
</details>
</div>
<p>To find all bags that con eventually contain our <code>shiny gold</code> bag, we first find the bags that can contain it directly. We then find the bags that can contain those bags and take the union of the two levels. We repeat, stopping when going up a level adds no further bags to the vector of bag colours already found. We then subtract 1, because we don’t want to count the original shiny gold bag.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to find all colours that contain a vector of other colours:</span></span>
<span id="cb40-2">contains_colours <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(colours) {</span>
<span id="cb40-3">  rules <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(contains <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> colours) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>(container) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(container)</span>
<span id="cb40-7">}</span>
<span id="cb40-8"></span>
<span id="cb40-9">bags <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shiny gold"</span></span>
<span id="cb40-10">old_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(bags)</span>
<span id="cb40-11">new_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb40-12"></span>
<span id="cb40-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keeping adding to the vector of bags, until no change</span></span>
<span id="cb40-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(old_length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> new_length) {</span>
<span id="cb40-15">  old_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(bags)</span>
<span id="cb40-16">  bags <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">union</span>(bags, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains_colours</span>(bags)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>()</span>
<span id="cb40-17">  new_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(bags)</span>
<span id="cb40-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cat(old_length, ", ", new_length, "\n")</span></span>
<span id="cb40-19">}</span>
<span id="cb40-20"></span>
<span id="cb40-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(bags) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 274</code></pre>
</div>
</div>
</section>
<section id="part-2-number-of-bags" class="level4">
<h4 class="anchored" data-anchor-id="part-2-number-of-bags">Part 2: Number of bags</h4>
<p>Now we need to discover the number of bags that a shiny gold bag must contain. I figured that lends itself to recursion, but struggled on the details. Hat tip to David Robinson for <a href="https://twitter.com/drob/status/1336003816395845632">this solution</a>. I’ve learnt a lot for myself by unpicking how it works.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">count_all_contained <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(colour) {</span>
<span id="cb42-2">  </span>
<span id="cb42-3">  relevant_rules <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rules <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(container <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> colour)</span>
<span id="cb42-5">  </span>
<span id="cb42-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(relevant_rules<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(relevant_rules<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>contains, count_all_contained)))</span>
<span id="cb42-7">  </span>
<span id="cb42-8">}</span>
<span id="cb42-9"></span>
<span id="cb42-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count_all_contained</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shiny gold"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 158730</code></pre>
</div>
</div>
</section>
</section>
<section id="day-8-handheld-halting" class="level2">
<h2 class="anchored" data-anchor-id="day-8-handheld-halting">Day 8: <a href="https://adventofcode.com/2020/day/8">Handheld Halting</a></h2>
<p><a href="data/AoC_day8.txt">My day 8 data</a></p>
<section id="part-1-infinite-loop" class="level4">
<h4 class="anchored" data-anchor-id="part-1-infinite-loop">Part 1: Infinite Loop</h4>
<p>Our programme gets stuck in an infinite loop. As well as keeping track of the accumulator, we need to keep track of where we’ve visited, and stop when we visit the same instruction twice. We use a <code>data.frame()</code> rather than a <code>tibble()</code> as the former is easier to index into.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">instructions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day8.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col.names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>))</span></code></pre></div>
</details>
</div>
<p>We start with a pretty straight-forward loop, noting that at most it can run for one more than the number of instructions in the programme until it hits an instruction it’s already visited. We update row number to visit next and the accumulator as appropriate.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">instructions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>visited <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb45-2"></span>
<span id="cb45-3">row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb45-4">accumulator <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb45-5"></span>
<span id="cb45-6">num_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(instructions)</span>
<span id="cb45-7"></span>
<span id="cb45-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(num_rows<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) {</span>
<span id="cb45-9"></span>
<span id="cb45-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visited"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb45-11">  </span>
<span id="cb45-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># +1 on number of times the row is visited</span></span>
<span id="cb45-13">  instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visited"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visited"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb45-14"></span>
<span id="cb45-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># case when the instruction is "acc"</span></span>
<span id="cb45-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acc"</span>) {</span>
<span id="cb45-17">    accumulator <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> accumulator <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>]</span>
<span id="cb45-18">    row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb45-19">  }</span>
<span id="cb45-20">  </span>
<span id="cb45-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># case when the instruction is "jmp"</span></span>
<span id="cb45-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jmp"</span>) {</span>
<span id="cb45-23">    row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>]</span>
<span id="cb45-24">  }</span>
<span id="cb45-25"></span>
<span id="cb45-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># case when the instruction is "nop"</span></span>
<span id="cb45-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nop"</span>) {</span>
<span id="cb45-28">    row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb45-29">  }</span>
<span id="cb45-30">}</span>
<span id="cb45-31">  </span>
<span id="cb45-32">accumulator</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1915</code></pre>
</div>
</div>
</section>
<section id="part-2-fixing-the-programme" class="level4">
<h4 class="anchored" data-anchor-id="part-2-fixing-the-programme">Part 2: Fixing the programme</h4>
<p>To break the loop, one of the <code>nop</code> instructions in the programme should be a <code>jmp</code> or vice versa. The plan is to swap these out one by one and check if the programme completes. It’s not a sophisticated approach, but it works fast enough (about a second).</p>
<p>First we note that the broken instruction must be one that we visited in Part 1. Also, an instruction of <code>jmp</code> with a value of 0 will get us stuck in a one-line infinite loop, so we avoid that.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb47-2"></span>
<span id="cb47-3">rows_to_check <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> instructions <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb47-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb47-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(visited <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb47-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(instruction <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acc"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb47-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>(instruction <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nop"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb47-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(row_id)</span></code></pre></div>
</details>
</div>
<p>We have 93 instruction to check. We modify our code from Part 1 slightly, converting it into a function and returning a list with values <code>completes</code> and <code>accumulator</code>. <code>completes</code> is <code>FALSE</code> as soon as we visit a row twice and <code>TRUE</code> if the number of our next row to visit is greater than the number of rows in the programme.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">programme_completes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(instructions) {</span>
<span id="cb48-2">  </span>
<span id="cb48-3">  row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> 1L</span>
<span id="cb48-4">  accumulator <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb48-5">  </span>
<span id="cb48-6">  num_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(instructions)</span>
<span id="cb48-7">  </span>
<span id="cb48-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(num_rows<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) {</span>
<span id="cb48-9">  </span>
<span id="cb48-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visited"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb48-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">completes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accumulator =</span> accumulator)) </span>
<span id="cb48-12">    }</span>
<span id="cb48-13">    </span>
<span id="cb48-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># +1 on number of times the row is visited</span></span>
<span id="cb48-15">    instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visited"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visited"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb48-16">  </span>
<span id="cb48-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># case when the instruction is "acc"</span></span>
<span id="cb48-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"acc"</span>) {</span>
<span id="cb48-19">      accumulator <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> accumulator <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>]</span>
<span id="cb48-20">      row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb48-21">    }</span>
<span id="cb48-22">  </span>
<span id="cb48-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jmp"</span>) {</span>
<span id="cb48-24">      row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>]</span>
<span id="cb48-25">    }</span>
<span id="cb48-26">  </span>
<span id="cb48-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (instructions[row, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nop"</span>) {</span>
<span id="cb48-28">      row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb48-29">    }</span>
<span id="cb48-30">  </span>
<span id="cb48-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> num_rows) {</span>
<span id="cb48-32">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">completes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accumulator =</span> accumulator)) </span>
<span id="cb48-33">    }</span>
<span id="cb48-34">  }</span>
<span id="cb48-35">}  </span></code></pre></div>
</details>
</div>
<p>We now loop over the rows we’ve identified to check, breaking the loop as soon as we find a programme that completes. Finally, we extract the accumulator value from the successful programme.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">instructions<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>visited <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb49-2"></span>
<span id="cb49-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (row <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> rows_to_check) {</span>
<span id="cb49-4">  </span>
<span id="cb49-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modify one row of the instructions,</span></span>
<span id="cb49-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copying data frame so we don't have to modify it back</span></span>
<span id="cb49-7">  modified_instructions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> instructions</span>
<span id="cb49-8">  </span>
<span id="cb49-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(instructions[row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jmp"</span>, </span>
<span id="cb49-10">         modified_instructions[row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nop"</span>, </span>
<span id="cb49-11">         modified_instructions[row, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jmp"</span>) </span>
<span id="cb49-12">  </span>
<span id="cb49-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if the modified programme completes</span></span>
<span id="cb49-14">  check_programme <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">programme_completes</span>(modified_instructions)</span>
<span id="cb49-15">  </span>
<span id="cb49-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (check_programme<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>completes) </span>
<span id="cb49-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb49-18">}</span>
<span id="cb49-19"></span>
<span id="cb49-20">check_programme<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>accumulator</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 944</code></pre>
</div>
</div>
</section>
</section>
<section id="day-9-encoding-error" class="level2">
<h2 class="anchored" data-anchor-id="day-9-encoding-error">Day 9: <a href="https://adventofcode.com/2020/day/9">Encoding Error</a></h2>
<p><a href="data/AoC_day9.txt">My day 9 data</a></p>
<section id="part-1-weak-link" class="level4">
<h4 class="anchored" data-anchor-id="part-1-weak-link">Part 1: Weak Link</h4>
<p>We have to find the first number in the list which is <em>not</em> the sum of a pair of different numbers in the preceding 25 numbers.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">input <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.double</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day9.txt"</span>)) </span></code></pre></div>
</details>
</div>
<p>There’s a nice trick for finding the pair of numbers in a vector that sum to a target that was doing the rounds on twitter in response to the Day 1 challenge: <code>intersect(input, 2020 - input)</code>. For this challenge, we expand on that idea, writing it as a <code>check_sum</code> function. Where there’s more than one pair, it won’t say which pair together, and if the number that’s half the target appears in the addends, it will only appear once in the output. However, for this challenge, we only need to know when there are <em>no</em> pairs that sum to the target, which will be the case when the length of the output of <code>check_sum</code> is 0.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">check_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(target, addends) {</span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">intersect</span>(addends, target<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>addends)</span>
<span id="cb52-3">}</span></code></pre></div>
</details>
</div>
<p>Then, it’s simply a case of iterating over windows of length 25, checking whether the following number is the sum of a distinct pair in that window, and returning the first one that isn’t.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">find_invalid_num <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">win =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) {</span>
<span id="cb53-2">  </span>
<span id="cb53-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (win<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(vec)) {</span>
<span id="cb53-4">    check <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_sum</span>(vec[i], vec[(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>win)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)])</span>
<span id="cb53-5">    </span>
<span id="cb53-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(check) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(vec[i])</span>
<span id="cb53-7">  }</span>
<span id="cb53-8">  </span>
<span id="cb53-9">}</span>
<span id="cb53-10"></span>
<span id="cb53-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_invalid_num</span>(input)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 507622668</code></pre>
</div>
</div>
</section>
<section id="part-2-contiguous-set" class="level4">
<h4 class="anchored" data-anchor-id="part-2-contiguous-set">Part 2: Contiguous set</h4>
<p>Find a contiguous set in the list that sums to the invalid number from Part 1, and add together the largest and smallest number in that range.</p>
<p>First, we note that after a certain point, all numbers in the input are larger than the target, so we don’t need to consider those. We reduce our input vector accordingly.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">target <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_invalid_num</span>(input)</span>
<span id="cb55-2"></span>
<span id="cb55-3">input_reduced <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> input[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> target)))]</span></code></pre></div>
</details>
</div>
<p>To find the contiguous set in the list that sums to the target, we make use of <code>accumulate()</code> from the <code>purrr</code> package. Let the input list be <img src="https://latex.codecogs.com/png.latex?x%20=%20(x_1,%20x_2,...,%20x_n)">. Then <code>accumulate(x, sum)</code> returns <img src="https://latex.codecogs.com/png.latex?a%20=%20(x_1,%20x_1%20+%20x_2,...,%20%5Csum_%7Bj=1%7D%5En%20x_j)">. We check whether any element of this vector is equal to the target. If so we index into the input vector appropriately, sum the min and max in the range and we’re done. If not, we consider the sums of all windows starting with the second element of the input list, and so on.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">contiguous_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(input, target) {</span>
<span id="cb56-2">  </span>
<span id="cb56-3">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(input)</span>
<span id="cb56-4">  </span>
<span id="cb56-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>len) {</span>
<span id="cb56-6">    a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(input[i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>len], sum)</span>
<span id="cb56-7">    b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target</span>
<span id="cb56-8">    </span>
<span id="cb56-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(b) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb56-10">      output_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(b)</span>
<span id="cb56-11">      </span>
<span id="cb56-12">      contiguous_set <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> input[i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> output_length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb56-13">      </span>
<span id="cb56-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(contiguous_set)))</span>
<span id="cb56-15">    }</span>
<span id="cb56-16">  }</span>
<span id="cb56-17">}</span>
<span id="cb56-18"></span>
<span id="cb56-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contiguous_sum</span>(input_reduced, target)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 76688505</code></pre>
</div>
</div>
<p>I appreciate that there’s some redundant calculation in this method. The vectors of accumulated sums can contain numbers larger than the target (if writing our own loop, we could break as soon as the accumulated sum got too big). Also, in retrospect, we could have only run <code>accumulate</code> once, then in the second iteration of the loop, subtracted <code>input[1]</code> from the result, in the third iteration subtracted <code>input[2]</code> from that result, etc. However, the function as written is concise and easy to understand, and gets our answer in around a second, so that will do!</p>
</section>
</section>
<section id="day-10-adapter-array" class="level2">
<h2 class="anchored" data-anchor-id="day-10-adapter-array">Day 10: <a href="https://adventofcode.com/2020/day/10">Adapter Array</a></h2>
<p><a href="data/AoC_day10.txt">My day 10 data</a></p>
<section id="part-1-adapter-distribution" class="level4">
<h4 class="anchored" data-anchor-id="part-1-adapter-distribution">Part 1: Adapter Distribution</h4>
<p>This is simply a case of ordering the adapters, prepending 0 and appending the the max in the list plus three, then finding the differences.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">adapters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb59-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/AoC_day10.txt"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb59-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>()</span>
<span id="cb59-4"></span>
<span id="cb59-5">adapter_diffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(adapters, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(adapters) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb59-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb59-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>()</span>
<span id="cb59-8"></span>
<span id="cb59-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(adapter_diffs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(adapter_diffs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3034</code></pre>
</div>
</div>
</section>
<section id="part-2-adapter-combinations" class="level4">
<h4 class="anchored" data-anchor-id="part-2-adapter-combinations">Part 2: Adapter combinations</h4>
<p>Instead of building up sequences of adapters, we see what we can remove from the full list.</p>
<p>First, we check the diffs: are they just 1 and 3 or are there any 2s?</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(adapter_diffs)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>adapter_diffs
 1  3 
74 41 </code></pre>
</div>
</div>
<p>We can’t remove an adapter if its difference with the previous adapter is 3, otherwise the difference between the adapters on either side of it will be too big.</p>
<p>What about diffs of 1? It depends how many ones there are around it. We can check this using the <code>rle()</code> (run length encoding) function</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">runs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rle</span>(adapter_diffs)</span>
<span id="cb63-2">runs</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Run Length Encoding
  lengths: int [1:48] 3 2 4 2 4 2 4 1 4 2 ...
  values : num [1:48] 1 3 1 3 1 3 1 3 1 3 ...</code></pre>
</div>
</div>
<p>What is the distribution of lengths of sequences of 1s?</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">runs_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lengths) </span>
<span id="cb65-2">runs_table</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
 1  2  3  4 
13 14 10 11 </code></pre>
</div>
</div>
<p>We have at most four diffs of 1 in a row.</p>
<p>We need to check that if we remove an adapter, the new differences do not exceed 3. Example sequences really helped me figure out what’s going on here:</p>
<ul>
<li>If the diff sequence is …, 3, 1, 3,… (e.g.&nbsp;adapters 1, 4, 5, 8)
<ul>
<li>1 option to keep as is</li>
<li>We cannot remove any adapters</li>
<li><strong>1 option in total</strong></li>
</ul></li>
<li>If the diff sequence is …, 3, 1, 1, 3,… (e.g.&nbsp;adapters 1, 4, 5, 6, 9)
<ul>
<li>1 option to keep as is</li>
<li>1 option to remove one adapter (e.g.&nbsp;the 5)</li>
<li>we cannot remove two adapters</li>
<li><strong>2 options total</strong></li>
</ul></li>
<li>If the diff sequence is …, 3, 1, 1, 1, 3,… (e.g.&nbsp;adapters 1, 4, 5, 6, 7, 10)
<ul>
<li>1 option to keep as is</li>
<li>2 options to remove one adapter (e.g.&nbsp;the 5 or 6)</li>
<li>1 options to remove two adapters (e.g.&nbsp;the 5 and 6)</li>
<li>We cannot remove three adapters</li>
<li><strong>4 options total</strong></li>
</ul></li>
<li>If the diff sequence is …, 3, 1, 1, 1, 1, 3,… (e.g.&nbsp;adapters 1, 4, 5, 6, 7, 8, 11)
<ul>
<li>1 option to keep as is</li>
<li>3 options to remove one adapter (e.g.&nbsp;5, 6, or 7)</li>
<li>3 options to remove two adapters (e.g.&nbsp;any two of 5, 6, and 7)</li>
<li>We cannot remove three adapters</li>
<li><strong>7 options total</strong></li>
</ul></li>
</ul>
<p>Finally, we multiply each run length of difference of 1s with the number of options we have for removing adapters, then take the product of those products.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">runs_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lengths =</span> runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lengths, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)</span>
<span id="cb67-2"></span>
<span id="cb67-3">options <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lengths =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb67-4"></span>
<span id="cb67-5">runs_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb67-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(values <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb67-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(options, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lengths"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb67-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prod_options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prod</span>(options)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb67-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(prod_options) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb67-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scientific =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "259172170858496"</code></pre>
</div>
</div>
</section>
</section>
<section id="day-11-seating-system" class="level2">
<h2 class="anchored" data-anchor-id="day-11-seating-system">Day 11: <a href="https://adventofcode.com/2020/day/11">Seating System</a></h2>
<p><a href="data/AoC_day11.txt">My day 11 data</a></p>
<section id="part-1-changing-layout" class="level4">
<h4 class="anchored" data-anchor-id="part-1-changing-layout">Part 1: Changing layout</h4>
<p>My code for Day 11 runs a little slow (about 10 seconds for Part 1 and 80 seconds for Part 2), so for the sake of being able to rebuild this page quickly as I keep updating it working through the challenges, I will demonstrate this code with the test input provided as an example.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb69-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb69-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span></code></pre></div>
</details>
</div>
<p>First we read in the data and convert it to a matrix (using the <a href="https://github.com/MilesMcBain/datapasta"><code>datapasta</code></a> package for the test input):</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># layout &lt;- readr::read_tsv("data/AoC_day11.txt", col_names = FALSE)</span></span>
<span id="cb70-2"></span>
<span id="cb70-3">layout <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tribble</span>(</span>
<span id="cb70-4">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>X1,</span>
<span id="cb70-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L.LL.LL.LL"</span>,</span>
<span id="cb70-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LLLLLLL.LL"</span>,</span>
<span id="cb70-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L.L.L..L.."</span>,</span>
<span id="cb70-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LLLL.LL.LL"</span>,</span>
<span id="cb70-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L.LL.LL.LL"</span>,</span>
<span id="cb70-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L.LLLLL.LL"</span>,</span>
<span id="cb70-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..L.L....."</span>,</span>
<span id="cb70-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LLLLLLLLLL"</span>,</span>
<span id="cb70-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L.LLLLLL.L"</span>,</span>
<span id="cb70-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L.LLLLL.LL"</span></span>
<span id="cb70-15">  )</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get number of columns for matrix</span></span>
<span id="cb71-2">num_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> layout <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_length</span>(X1)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(length)</span>
<span id="cb71-6"></span>
<span id="cb71-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split layout into characters and turn to vector</span></span>
<span id="cb71-8">layout_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> layout <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">X1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(X1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">split =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(X1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>()</span>
<span id="cb71-12"></span>
<span id="cb71-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># organise into matrix</span></span>
<span id="cb71-14">initial_layout <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(layout_vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> num_col, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</details>
</div>
<p>Next, we write a helper function that, given a matrix and row and column indices, returns a vector of the adjacent seats. We need to take care when indexing into the matrix, so we treat all corner and edge cases separately. Fiddly, but gets the job done.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">get_adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(mat, i,j) {</span>
<span id="cb72-2">  </span>
<span id="cb72-3">  nr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mat)</span>
<span id="cb72-4">  nc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mat)</span>
<span id="cb72-5">  </span>
<span id="cb72-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># corner cases</span></span>
<span id="cb72-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])}</span>
<span id="cb72-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nc) {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,(nc<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)], mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,(nc<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nc])}</span>
<span id="cb72-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[nr,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], mat[nr<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])}</span>
<span id="cb72-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nc) {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[nr<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, (nc<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nc], mat[nr, nc<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>])}  </span>
<span id="cb72-11">  </span>
<span id="cb72-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edge cases</span></span>
<span id="cb72-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>,j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)], mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, (j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])}</span>
<span id="cb72-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nr) {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[nr, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>,j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)], mat[nr<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, (j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])}</span>
<span id="cb72-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], mat[(i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])}</span>
<span id="cb72-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nc) {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), nc], mat[(i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), nc<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>])}</span>
<span id="cb72-17">  </span>
<span id="cb72-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inside cases</span></span>
<span id="cb72-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(mat[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>,(j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)], mat[i,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>,j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)], mat[i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,(j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])}</span>
<span id="cb72-20">  </span>
<span id="cb72-21">  adj</span>
<span id="cb72-22">}</span></code></pre></div>
</details>
</div>
<p>Once we have a vector of surrounding seats, we can apply the rules in the problem to determine whether a given seat needs to change state. The <code>needs_changing</code> helper function does that. It’s overkill at this point to give options to specify the function for finding the vector of seats to check, and the maximum number of occupied seats people can tolerate around them, but (spolier alert) I put in these options when working on the challenge in Part 2.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">needs_changing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb73-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(mat, i,j, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get_surround =</span> get_adj, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_occupied =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb73-3">  </span>
<span id="cb73-4">  surround <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_surround</span>(mat, i,j)</span>
<span id="cb73-5">  n_occupied <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(surround <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>)</span>
<span id="cb73-6">  </span>
<span id="cb73-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((mat[i,j] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (n_occupied <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb73-8">  </span>
<span id="cb73-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((mat[i,j] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (n_occupied <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> max_occupied)) {</span>
<span id="cb73-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb73-11">  }</span>
<span id="cb73-12">  </span>
<span id="cb73-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb73-14">}</span></code></pre></div>
</details>
</div>
<p>Since floor spaces don’t change, we only need to consider seats. We save the indices of the seats into a data frame, so we can vectorise over it using <code>tidyverse</code> functions. However, when we’ve determined the seats that need changing, using our <code>needs_changing</code> function, we need to convert those indices from a data.frame into a matrix, in order to index into the layout matrix appropriately and make the changes.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">seats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(initial_layout <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arr.ind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb74-2"></span>
<span id="cb74-3">seats_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(seats) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb74-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> row, </span>
<span id="cb74-5">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">j =</span> col)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">layout <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> initial_layout</span>
<span id="cb75-2">iters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb75-3"></span>
<span id="cb75-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop until there are no further changes</span></span>
<span id="cb75-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">repeat</span> {</span>
<span id="cb75-6">  </span>
<span id="cb75-7">  change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb75-8">  </span>
<span id="cb75-9">  seats_to_change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb75-10">    seats_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb75-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb75-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">change_seat =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs_changing</span>(layout,i,j))   </span>
<span id="cb75-13">  </span>
<span id="cb75-14">  change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(seats_to_change<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>change_seat)</span>
<span id="cb75-15">  </span>
<span id="cb75-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (change <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb75-17">  </span>
<span id="cb75-18">  indices_to_change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb75-19">    seats_to_change <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb75-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(change_seat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb75-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(i,j) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb75-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>()  </span>
<span id="cb75-23"></span>
<span id="cb75-24">  layout[indices_to_change] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb75-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>),  layout[indices_to_change])</span>
<span id="cb75-26">  </span>
<span id="cb75-27">  iters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iters <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb75-28">}</span>
<span id="cb75-29"></span>
<span id="cb75-30">part_1_iters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iters</span>
<span id="cb75-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(layout<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 37</code></pre>
</div>
</div>
<p>On the test set, this takes 5 iterations. On the full data set, my answer is 2316, and it took 107 iterations.</p>
</section>
<section id="part-2-looking-further" class="level4">
<h4 class="anchored" data-anchor-id="part-2-looking-further">Part 2: Looking further</h4>
<p>Now, people look to the first seat they can see in each direction, and will change from occupied to unoccupied if five or more of them are occupied.</p>
<p>The plan is to write a function that extracts full vectors from a given seat to the edge of the layout matrix in each of the eight directions, then finds the first seat in each of those directions, and finally collects those into a vector of the seats under consideration when determining if a change is needed. Then I can reuse the loop from Part 1, just changing the arguments in the calls to <code>needs_changing</code>.</p>
<p>Here’s a helper function to get the first seat in a vector looking in one direction:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">get_first_seat_from_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(vec) {</span>
<span id="cb77-2">  </span>
<span id="cb77-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>))) {</span>
<span id="cb77-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(vec[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>))])</span>
<span id="cb77-5">  }</span>
<span id="cb77-6">  </span>
<span id="cb77-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb77-8">}</span></code></pre></div>
</details>
</div>
<p>Now, if I thought getting adjacent seats to a given seat in Part 1 was fiddly, it’s nothing on getting a vector from a given seat to the edge of the matrix. There are many cases to consider to make we we don’t go out of bounds. In the diagonal directions, first we get a matrix of the indices of the matrix we need, then subset into the matrix accordingly.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># takes a layout matrix (elements ".", "#", "L")</span></span>
<span id="cb78-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns vector with first "L" or "#" encountered in each direction</span></span>
<span id="cb78-3">get_first_seat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(mat, i,j) {</span>
<span id="cb78-4">  </span>
<span id="cb78-5">  nr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mat)</span>
<span id="cb78-6">  nc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mat)</span>
<span id="cb78-7">  </span>
<span id="cb78-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># North</span></span>
<span id="cb78-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb78-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat[(i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,j]</span>
<span id="cb78-11">  </span>
<span id="cb78-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># South</span></span>
<span id="cb78-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nr) S <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb78-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> nr) S <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat[(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nr,j]</span>
<span id="cb78-15">  </span>
<span id="cb78-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># East</span></span>
<span id="cb78-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nc) E <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb78-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> nc) E <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat[i, (j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nc]</span>
<span id="cb78-19">  </span>
<span id="cb78-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># West</span></span>
<span id="cb78-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) W <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb78-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) W <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat[i, (j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb78-23">  </span>
<span id="cb78-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># how far in each direction to edge of matrix</span></span>
<span id="cb78-25">  to_N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb78-26">  to_S <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> i</span>
<span id="cb78-27">  to_E <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> j</span>
<span id="cb78-28">  to_W <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb78-29">  </span>
<span id="cb78-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># North-West</span></span>
<span id="cb78-31">  NW_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(to_N, to_W)</span>
<span id="cb78-32">  </span>
<span id="cb78-33">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) NW <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb78-34">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb78-35">    mat_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb78-36">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>((i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>NW_length), (j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>NW_length)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb78-37">    NW <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat[mat_index]</span>
<span id="cb78-38">  }</span>
<span id="cb78-39">  </span>
<span id="cb78-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># North-East</span></span>
<span id="cb78-41">  NE_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(to_N, to_E)</span>
<span id="cb78-42">  </span>
<span id="cb78-43">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nc) NE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb78-44">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb78-45">    mat_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb78-46">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>((i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>NE_length), (j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>NE_length)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb78-47">    NE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat[mat_index]</span>
<span id="cb78-48">  }</span>
<span id="cb78-49">  </span>
<span id="cb78-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># South-East</span></span>
<span id="cb78-51">  SE_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(to_S, to_E)</span>
<span id="cb78-52">  </span>
<span id="cb78-53">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nc) SE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb78-54">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb78-55">    mat_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb78-56">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>((i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>SE_length), (j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>SE_length)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb78-57">    SE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat[mat_index]</span>
<span id="cb78-58">  }</span>
<span id="cb78-59">  </span>
<span id="cb78-60">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># South-West</span></span>
<span id="cb78-61">  SW_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(to_S, to_W)</span>
<span id="cb78-62">  </span>
<span id="cb78-63">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> nr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) SW <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb78-64">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb78-65">    mat_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb78-66">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>((i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>SW_length), (j<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>SW_length)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb78-67">    SW <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat[mat_index]</span>
<span id="cb78-68">  }</span>
<span id="cb78-69"></span>
<span id="cb78-70">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vectors from mat[i,j] to the edge in each direction </span></span>
<span id="cb78-71">  all_vecs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb78-72">    (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">S =</span> S, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">E =</span> E, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">W =</span> W, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NW =</span> NW, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">NE =</span> NE, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SE =</span> SE, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SW =</span> SW))</span>
<span id="cb78-73">  </span>
<span id="cb78-74">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first seat in each direction, collapsed to a vector</span></span>
<span id="cb78-75">  first_seats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(all_vecs, get_first_seat_from_vec)</span>
<span id="cb78-76">  </span>
<span id="cb78-77">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove NAs from list and return</span></span>
<span id="cb78-78">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (these occur either when starting on an edge, </span></span>
<span id="cb78-79">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or when there are no seats in a given direction)</span></span>
<span id="cb78-80">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(first_seats[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(first_seats)])</span>
<span id="cb78-81"></span>
<span id="cb78-82">}</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">layout <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> initial_layout</span>
<span id="cb79-2">iters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb79-3"></span>
<span id="cb79-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop until there are no further changes</span></span>
<span id="cb79-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">repeat</span> {</span>
<span id="cb79-6">  </span>
<span id="cb79-7">  change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb79-8">  </span>
<span id="cb79-9">  seats_to_change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb79-10">    seats_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">change_seat =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs_changing</span>(layout,i,j, get_first_seat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))   </span>
<span id="cb79-13">  </span>
<span id="cb79-14">  change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(seats_to_change<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>change_seat)</span>
<span id="cb79-15">  </span>
<span id="cb79-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (change <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb79-17">  </span>
<span id="cb79-18">  indices_to_change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb79-19">    seats_to_change <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(change_seat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(i,j) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb79-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>()  </span>
<span id="cb79-23"></span>
<span id="cb79-24">  layout[indices_to_change] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb79-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>),  layout[indices_to_change])</span>
<span id="cb79-26">  </span>
<span id="cb79-27">  iters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iters <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb79-28">}</span>
<span id="cb79-29"></span>
<span id="cb79-30">part_2_iters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iters</span>
<span id="cb79-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(layout<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 26</code></pre>
</div>
</div>
<p>On the test set, this takes 6 iterations. On the full data set, my answer is 2128, and it took 87 iterations. Given this is fewer iterations than in Part 1, it must be my code for getting the first seat that’s slowing things down.</p>
<p>I am unsatisfied both by how many lines of code this has taken as well as the time taken to run. The introduction to Advent of Code says that each challenge has a solution that will complete in at most 15 seconds on ten year old hardware. So clearly there’s a better way of doing this. Perhaps something to revisit in the future.</p>
</section>
</section>
<section id="next" class="level2">
<h2 class="anchored" data-anchor-id="next">Next</h2>
<p>I was late to the game, and that was as far as I managed to get in December 2020. I’m looking forward to taking on the challenge again in 2021!</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>


<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2022-11-11 21:32:05 GMT</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2020-12-09_advent-of-code-2020/index.qmd" target="_blank">source code</a>, <a href="https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2020-12-09_advent-of-code-2020/renv.lock" target="_blank">R environment</a></p>
</div></section><section id="session-info" class="level5 appendix"><h2 class="anchored quarto-appendix-heading">Session info</h2><div class="quarto-appendix-contents">

<details>
<summary>
Toggle
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.1 (2022-06-23)
 os       macOS Monterey 12.6.1
 system   aarch64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Europe/London
 date     2022-11-11
 pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)
 quarto   1.2.247 @ /usr/local/bin/quarto

─ Packages ───────────────────────────────────────────────────────────────────
 ! package     * version date (UTC) lib source
 P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)
 P forcats     * 0.5.1   2021-01-27 [?] CRAN (R 4.2.0)
 P ggplot2     * 3.3.6   2022-05-03 [?] CRAN (R 4.2.0)
 P purrr       * 0.3.4   2020-04-17 [?] CRAN (R 4.2.0)
 P readr       * 2.1.2   2022-01-30 [?] CRAN (R 4.2.0)
 P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.0)
 P stringr     * 1.4.0   2019-02-10 [?] CRAN (R 4.2.0)
 P tibble      * 3.1.8   2022-07-22 [?] CRAN (R 4.2.0)
 P tidyr       * 1.2.0   2022-02-01 [?] CRAN (R 4.2.0)
 P tidyverse   * 1.3.1   2021-04-15 [?] CRAN (R 4.2.0)

 [1] /private/var/folders/xf/jb2591gj41xbj0c4y2d8_7ch0000gn/T/RtmpUYmkWT/renv-library-220258664caa
 [2] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20
 [3] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library

 P ── Loaded and on-disk path mismatch.

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</details>


<!-- -->

</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kaye2020,
  author = {Kaye, Ella},
  title = {Advent of {Code} 2020},
  date = {2020-12-09},
  url = {https://ellakaye.co.uk/posts/2020-12-09_advent-of-code-2020},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kaye2020" class="csl-entry quarto-appendix-citeas">
Kaye, Ella. 2020. <span>“Advent of Code 2020.”</span> December 9, 2020.
<a href="https://ellakaye.co.uk/posts/2020-12-09_advent-of-code-2020">https://ellakaye.co.uk/posts/2020-12-09_advent-of-code-2020</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Advent of Code</category>
  <guid>https://ellakaye.co.uk/posts/2020-12-09_advent-of-code-2020/index.html</guid>
  <pubDate>Wed, 09 Dec 2020 00:00:00 GMT</pubDate>
  <media:content url="https://ellakaye.co.uk/posts/2020-12-09_advent-of-code-2020/advent-of-code-2020.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>n_letter_words and a personal (publicly available) package</title>
  <dc:creator>Ella Kaye</dc:creator>
  <link>https://ellakaye.co.uk/posts/2017-06-17_n-letter-words/index.html</link>
  <description><![CDATA[ 




<p>There’s a little R function that I wrote and packaged up to generate a vector or data frame of words of a given length. I find it useful in a wide variety of contexts and thought other might too. To kick off my new blog, here’s a post about it.</p>
<p>The function, <code>n_letter_words</code>, came about because I wanted to be able to generate row and column names for a large matrix - didn’t matter what they were, as long as they were unique. Since I was in the habit of using the built-in <code>LETTERS</code> vector to do this for small matrices, I naturally thought of using combinations of letters to do this in a larger case. In figuring out how to do this, as is so often the case, it was <a href="https://stackoverflow.com/questions/11388359/unique-combination-of-all-elements-from-two-or-more-vectors">stackoverflow</a> to the rescue. There, I learnt about <code>expand.grid</code> and could then use some tidyverse tools to get the vector I was after:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand.grid</span>(LETTERS, LETTERS) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unite</span>(word, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>()</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(out), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(out))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "AA" "BA" "CA" "DA" "EA" "FA" "UZ" "VZ" "WZ" "XZ" "YZ" "ZZ"</code></pre>
</div>
</div>
<p>Sorted! At least I thought so, until, a couple of months later, when I wanted to generate names for a 1000*1000 matrix, and realised both that I’d forgotten the <code>expand.grid</code> trick, and once I’d re-found the stackoverflow post, that it didn’t give me enough words. That was enough to make it worth writing a function, taking <code>n</code> as an argument, that gives all ‘words’ of length <img src="https://latex.codecogs.com/png.latex?n">.</p>
<p>Writing functions always makes me think of what other arguments might be useful. What if we want something between the 676 two-letter words and 17,576 three-letter words (or the 456,976 four-letter words, etc)? Hence the argument <code>num_letters</code>, which can be set between 1 and 26, and results in a total of <code>num_letters</code><img src="https://latex.codecogs.com/png.latex?%5En"> words. By default, the function returns a <code>tibble</code>, but setting <code>as_vector = TRUE</code> does what you’d expect. And I threw in a <code>case</code> argument too.</p>
<p>Now that I had my function, what to do with it? I remembered articles I’d read about the usefulness of <a href="https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/">making</a> and <a href="(https://hilaryparker.com/2013/04/03/personal-r-packages/)">sharing</a> a personal package. Now seemed like the time to do that myself.</p>
<p>So, <a href="https://github.com/EllaKaye/EMK">here</a> is my personal package, <code>EMK</code>. If you think that <code>n_letter_words</code> might be of use to you, then feel free to install!</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EllaKaye/EMK"</span>)</span></code></pre></div>
</details>
</div>
<p>Some examples of <code>n_letter_words</code>:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(EMK)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n_letter_words</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 676 × 1
   word 
   &lt;chr&gt;
 1 AA   
 2 BA   
 3 CA   
 4 DA   
 5 EA   
 6 FA   
 7 GA   
 8 HA   
 9 IA   
10 JA   
# … with 666 more rows</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">some_three_letter_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n_letter_words</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num_letters =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">case =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lower"</span>, </span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as_vector =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb6-6">)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(some_three_letter_words), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(some_three_letter_words))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "aaa" "baa" "caa" "daa" "eaa" "faa" "ejj" "fjj" "gjj" "hjj" "ijj" "jjj"</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(some_three_letter_words)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1000</code></pre>
</div>
</div>
<p>For now, my personal package has only this one function, but watch this space! No doubt I’ll be adding more that I find useful. Perhaps, you’ll find them useful too.</p>
<p>Incidentally, none of the above would have happened if I’d just thought, for my test matrix <code>A</code>, to set <code>dimnames(A) &lt;- list(1:nrow(A), 1:ncol(A))</code>!</p>
<!--------------- appendices go here ----------------->
<div class="cell">
<div class="cell-output-display">


</div>
</div>


<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2022-11-11 21:27:19 GMT</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2017-06-17_n-letter-words/index.qmd" target="_blank">source code</a>, <a href="https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2017-06-17_n-letter-words/renv.lock" target="_blank">R environment</a></p>
</div></section><section id="session-info" class="level4 appendix"><h2 class="anchored quarto-appendix-heading">Session info</h2><div class="quarto-appendix-contents">

<details>
<summary>
Toggle
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.1 (2022-06-23)
 os       macOS Monterey 12.6.1
 system   aarch64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Europe/London
 date     2022-11-11
 pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)
 quarto   1.2.247 @ /usr/local/bin/quarto

─ Packages ───────────────────────────────────────────────────────────────────
 ! package     * version date (UTC) lib source
 P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)
 P EMK         * 0.1.0   2022-08-16 [?] Github (EllaKaye/EMK@a28e89e)
 P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.0)
 P tidyr       * 1.2.0   2022-02-01 [?] CRAN (R 4.2.0)

 [1] /private/var/folders/xf/jb2591gj41xbj0c4y2d8_7ch0000gn/T/RtmpsJIstF/renv-library-1e576ca13792
 [2] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20
 [3] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library

 P ── Loaded and on-disk path mismatch.

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</details>


<!-- -->

</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kaye2017,
  author = {Kaye, Ella},
  title = {`N\_letter\_words` and a Personal (Publicly Available)
    Package},
  date = {2017-06-17},
  url = {https://ellakaye.co.uk/posts/2017-06-17_n-letter-words},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kaye2017" class="csl-entry quarto-appendix-citeas">
Kaye, Ella. 2017. <span>“`N_letter_words` and a Personal (Publicly
Available) Package.”</span> June 17, 2017. <a href="https://ellakaye.co.uk/posts/2017-06-17_n-letter-words">https://ellakaye.co.uk/posts/2017-06-17_n-letter-words</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>package development</category>
  <guid>https://ellakaye.co.uk/posts/2017-06-17_n-letter-words/index.html</guid>
  <pubDate>Fri, 16 Jun 2017 23:00:00 GMT</pubDate>
  <media:content url="https://ellakaye.co.uk/images/hex/EMK.png" medium="image" type="image/png" height="165" width="144"/>
</item>
</channel>
</rss>
