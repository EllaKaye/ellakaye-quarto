<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ella Kaye</title>
<link>https://ellakaye.co.uk/posts.html#category=Quarto</link>
<atom:link href="https://ellakaye.co.uk/posts-quarto.xml" rel="self" type="application/rss+xml"/>
<description>Personal website, portfolio and blog</description>
<image>
<url>https://ellakaye.co.uk/images/logo.png</url>
<title>Ella Kaye</title>
<link>https://ellakaye.co.uk/posts.html#category=Quarto</link>
</image>
<generator>quarto-1.3.250</generator>
<lastBuildDate>Mon, 10 Apr 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>Creating an animated CSS logo</title>
  <dc:creator>Ella Kaye</dc:creator>
  <link>https://ellakaye.co.uk/posts/2023-04-11_animated-logo/index.html</link>
  <description><![CDATA[ 




<!--------------- set up ----------------->
<!--------------- post content ----------------->
<p>In my <a href="../../posts/2022-12-11_welcome-quarto/index.html">previous post</a>, I outlined a number of customisations I made to this personal website and promised a series of future blog posts on how I implemented them. This is the first in the series, on the creation of the animated logo in the top left corner of the site. Note that for the animation to work properly, it needs to be viewed on a device with a mouse/trackpad, not a touchscreen.</p>
<section id="the-motivation-for-creating-a-css-logo" class="level2">
<h2 class="anchored" data-anchor-id="the-motivation-for-creating-a-css-logo">The motivation for creating a CSS logo</h2>
<p>Before I get to the details of <em>how</em> I created the animation, first a note on why. On my previous site, built with {distill}, I had a static version of the same logo, saved as a .png. As I was developing this site, I tweaked my colour scheme a lot, and each time I did so, I had to head back to my design software, update the image there, re-export it and reload the site. Needless to say, that quickly became tiresome.</p>
<p>That issue became even more pressing when I also implemented a dark mode. My light mode logo, with its dark grey text, disappeared into the background of the dark mode. I needed a way to switch logos on light/dark toggle. I did find a <a href="https://github.com/quarto-dev/quarto-cli/discussions/1647">solution</a>, which used some hacky CSS to override the logo.png used in light mode with an alternative logo-dark.png in dark mode, but now needed to manually edit two logo images whenever I tweaked the theme, doubling my original problem.<sup>1</sup></p>
<p>I realised that if I could create and style the logo with HTML and CSS, it would solve both problems: it would automatically update along with any theme changes <em>and</em> I could theme separately in light and dark modes. It would always be consistent with the appearance of the site.</p>
<p>Plus, around the time I was grappling with these issues, I saw <a href="https://maya.rbind.io">Maya Gans</a> tweet that she was working on a CSS animated logo for her site and I became excited by the possibility of figuring out how to do something similar: the line separating my first and last name seemed destined to move on hover. I got in touch with Maya and she was fantastically helpful in assisting me with the implementation. There was lots to troubleshoot!</p>
</section>
<section id="figuring-out-the-html-and-yaml" class="level2">
<h2 class="anchored" data-anchor-id="figuring-out-the-html-and-yaml">Figuring out the HTML and YAML</h2>
<p>The first challenge was figuring out the HTML to use in the title that would give me something to style for the line between the names. I needed my first name on top of my last name, but using either <code>&lt;hr&gt;</code> or <code>&lt;br&gt;</code> tags didn’t work. It seems there are some limits to the HTML that can be used in yaml with Quarto. With <code>&lt;hr&gt;</code>, my last name was no longer displayed. Using <code>&lt;br&gt;</code> did give something to work with, at least that displayed on Chrome, but not on my default browser Safari. It turned out that <code>&lt;span&gt;</code> did the trick, with the addition of a class I could apply a CSS style to. The title became <code>ELLA&lt;span class='icon-line'&gt;&lt;/span&gt;KAYE</code>.</p>
<p>With that as my website title and with CSS applied, the logo looked as I wanted, but the title in the browser tab also read <code>ELLA&lt;span class='icon-line'&gt;&lt;/span&gt;KAYE</code>, which wasn’t great. After some digging, I found it was possible to set the navbar title separately from the website title:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">website</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit">"Ella Kaye"</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit">"ELLA&lt;span class='icon-line'&gt;&lt;/span&gt;KAYE"</span></span></code></pre></div>
<p>That solves the problem. The browser tab shows “Ella Kaye” but the title of the navbar becomes the logo, with its span that can be styled. The title of the website is also important if you have an RSS feed for your blog, which is another reason not to have additional HTML in it.</p>
</section>
<section id="theming-the-static-logo" class="level2">
<h2 class="anchored" data-anchor-id="theming-the-static-logo">Theming the (static) logo</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This section assumes a little bit of familiarity with CSS and using Sass in Quarto themes. If these are new to you, I recommend first reading the ‘Style your blog’ section of Albert Rapp’s epic <a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html#style-your-blog">‘Ultimate Guide to Starting a Quarto blog’</a> post, and watching the accompanying <a href="https://www.youtube.com/watch?v=ErRX8plZpQE">video</a>, which dives into how to customise the appearance of your site. Sam Csik also just published an excellent deck of <a href="https://ucsb-meds.github.io/customizing-quarto-websites/#/title-slide">slides on customising Quarto websites with Sass and CSS</a>. The <a href="https://quarto.org/docs/output-formats/html-themes.html">official Quarto docs</a> on HTML themes is also really useful. For learning CSS more generally, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">MDN</a> is a comprehensive resource.</p>
</div>
</div>
<p>I gave the span separating my first and last names in the logo the class <code>icon-line</code>, so I can target that to style it. I have custom themes for my light and dark modes, in the files <a href="https://github.com/EllaKaye/ellakaye.co.uk/blob/main/assets/ek-theme-light.scss"><code>ek-theme-light.scss</code></a> and <a href="https://github.com/EllaKaye/ellakaye.co.uk/blob/main/assets/ek-theme-dark.scss"><code>ek-theme-dark.scss</code></a> respectively. I have the following rule in both files:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode scss code-with-copy"><code class="sourceCode scss"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">.icon-line</span> {</span>
<span id="cb2-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">display</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">block</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">background</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit">$primary</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb2-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">width</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">100</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit">%</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb2-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">height</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">6</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb2-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">margin</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit">auto</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb2-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">display</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">table</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb2-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">margin-top</span>: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">6</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb2-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">margin-bottom</span>: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">6</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb2-10">}</span></code></pre></div>
<p>It’s a bit of a pain to have to define this rule, identically, in both <code>.scss</code> files, but it’s necessary because of setting <code>background: $primary;</code>. This is what ensures that the icon-line changes colour when light/dark mode is toggled. <code>$primary</code> is a Sass variable that is set to be the main accent colour. It is pink in light mode and green in dark mode. This is achieved by defining the following variable in <code>ek-theme-light.scss</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sass code-with-copy"><code class="sourceCode sass"><span id="cb3-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit">$pink</span>:      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit">#D4006A</span>;</span>
<span id="cb3-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit">$primary</span>:   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit">$pink</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit">!default</span>;</span></code></pre></div>
<p>and similarly in <code>ek-theme-dark.scss</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sass code-with-copy"><code class="sourceCode sass"><span id="cb4-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit">$green</span>:     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit">#00D46A</span>;</span>
<span id="cb4-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit">$primary</span>:   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit">$green</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit">!default</span>;</span></code></pre></div>
<p>Because <code>$primary</code> is defined differently for the two themes, the rule for <code>.icon-line</code> has to appear in both theme files to pick up that difference.</p>
<p>The other important property to note in the <code>.icon-line</code> rule that of <code>width: 100%</code>. This ensures that the line occupies the full width of the <code>navbar-title</code>. This is the property that we will change with the animation.</p>
</section>
<section id="setting-up-the-css-animation" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-css-animation">Setting up the CSS animation</h2>
<p>Although, as explained above, the styling of the <code>icon-line</code> has to appear in the two <code>.scss</code> files, the animation is applied the same way in both light and dark mode and, moreover, is created with pure CSS (i.e.&nbsp;without using any special features of Sass). Therefore the code for the animation lives in my <code>ek-styles.css</code> file.</p>
<p>The code for the animation is in two parts. The first part selects what we want to animate and when, how long the animation should last and what the animation is called:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">.navbar-title</span><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit">:hover</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">.icon-line</span> {</span>
<span id="cb5-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">animation-duration</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">600</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit">ms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb5-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">animation-name</span>: line-expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb5-4">}</span></code></pre></div>
<p>The line <code>.navbar-title:hover &gt; .icon-line</code> is the selector, i.e.&nbsp;defines what we want to style. As described above, in <code>_quarto.yml</code>, we set the logo to be the title of the navbar. That translates to the CSS class <code>navbar-title</code>.<sup>2</sup> In CSS, we define a rule for a class by prefixing the class name with a <code>.</code>, i.e.&nbsp;<code>.navbar-title</code>. The suffix <code>:hover</code> means that the rule is activated when the cursor hovers over the navbar title. But it’s not the whole logo we want to animate, just the element with the class <code>icon-line</code> within it, which is what the <code>&gt; .icon-line</code> part of the selector does. Putting that all together, the selector <code>.navbar-title:hover &gt; .icon-line</code> translates to ‘when hovering over the navbar title, select the icon-line within it’.</p>
<p>Now that we’ve selected what we want to animate, we can define some key properties of how we want the animation to progress (though not yet the appearance of the animation). In particular, we say we want the animation to last 600ms. We also name the animation, which is important, because we use the name later when defining what the animation actually does.</p>
<p>This brings us to the second part of the code for the animation:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit">@keyframes</span> line-expand {</span>
<span id="cb6-2">  from {</span>
<span id="cb6-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">width</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">0</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit">%</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb6-4">  }</span>
<span id="cb6-5">  </span>
<span id="cb6-6">  to {</span>
<span id="cb6-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">width</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit">100</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit">%</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit">;</span></span>
<span id="cb6-8">  }</span>
<span id="cb6-9">}</span></code></pre></div>
<p>Here, we use the <code>@keyframes</code> at-rule, with the name of the animation set above, to define the appearance of the animation. <code>from</code> indicates what we want the appearance to be at the beginning of the animation, and <code>to</code> indicates the same for the end. For my logo, I want to change the width of the line in the icon (i.e.&nbsp;the span with class <code>icon-line</code>). At the beginning of the animation, I want it to disappear (i.e.&nbsp;have a width of 0%), then by the end, the width has returned to 100%, the same as in its static state.</p>
<p>For more information on creating CSS animations, see the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations">MDN docs</a>. My logo animation is just about as simple as a CSS animation can be. The above docs explain more of the theory and delve into more complicated examples.</p>
</section>
<section id="applying-the-theme-and-animation" class="level2">
<h2 class="anchored" data-anchor-id="applying-the-theme-and-animation">Applying the theme and animation</h2>
<p>The rules relating to the styling and animation of the logo appear in three different files. In order to apply them to the site, these need to be declared on the website’s <code>_quarto.yml</code> file. For this site, the <code>.scss</code> and <code>.css</code> files live in the <code>assets</code> directory, and they’re set in <code>_quarto.yml</code> as follows:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit"> </span></span>
<span id="cb7-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">light</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit"> assets/ek-theme-light.scss</span></span>
<span id="cb7-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">dark</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit"> assets/ek-theme-dark.scss</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">css</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit"> assets/ek-styles.css</span></span></code></pre></div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s it! We’ve used HTML in the navbar title to create a logo, styled the static version in our light and dark themes, applied a CSS animation in a separate .css file and made sure all the files are linked properly in <code>_quarto.yml</code> so they apply to the site.</p>
<p>I was thrilled recently to receive an e-mail from Matthieu Hanf letting me know that he’d found the repo for my site useful when creating his. His <a href="https://mhanf.netlify.app">site</a> is really cool and also features a navbar title logo that animates on hover.</p>
<p>If you have an animated logo on your site, please comment in the box at the bottom of this page with a link to it. I’d love to see!</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-04-11 15:25:57 BST</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2023-04-11_animated-logo/index.qmd" target="_blank">source code</a>, <a href="https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2023-04-11_animated-logo/renv.lock" target="_blank">R environment</a></p>
</div></section><section id="session-info" class="level5 appendix"><h2 class="anchored quarto-appendix-heading">Session info</h2><div class="quarto-appendix-contents">

<details>
<summary>
Toggle
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.2 (2022-10-31)
 os       macOS Ventura 13.3
 system   aarch64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Europe/London
 date     2023-04-11
 pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)
 quarto   1.3.250 @ /usr/local/bin/quarto

─ Packages ───────────────────────────────────────────────────────────────────
 ! package     * version date (UTC) lib source
 P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.0)

 [1] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20
 [2] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/sandbox/R-4.2/aarch64-apple-darwin20/fd29d0b8

 P ── Loaded and on-disk path mismatch.

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</details>


<!-- -->

</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This hack does still provide a useful trick for people with logos that can’t be created with HTML and styled with CSS but who nevertheless want to switch logos between light and dark modes.↩︎</p></li>
<li id="fn2"><p>We can determine the class of an element by right-clicking on it in a browser then selecting ‘Inspect’ or ‘Inspect element’ (depending on the browser) from the drop-down list. This opens up developer mode and will highlight the element you’re inspecting, from which you can read off the class. Albert Rapp’s <a href="https://www.youtube.com/watch?v=ErRX8plZpQE">video</a> (also mentioned above) demonstrates how to do this.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kaye2023,
  author = {Kaye, Ella},
  title = {Creating an Animated {CSS} Logo},
  date = {2023-04-11},
  url = {https://ellakaye.co.uk/posts/2023-04-11_animated-logo},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kaye2023" class="csl-entry quarto-appendix-citeas">
Kaye, Ella. 2023. <span>“Creating an Animated CSS Logo.”</span> April
11, 2023. <a href="https://ellakaye.co.uk/posts/2023-04-11_animated-logo">https://ellakaye.co.uk/posts/2023-04-11_animated-logo</a>.
</div></div></section></div> ]]></description>
  <category>Quarto</category>
  <category>CSS</category>
  <category>Sass</category>
  <category>Web development</category>
  <guid>https://ellakaye.co.uk/posts/2023-04-11_animated-logo/index.html</guid>
  <pubDate>Mon, 10 Apr 2023 23:00:00 GMT</pubDate>
  <media:content url="https://ellakaye.co.uk/images/logo.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Welcome to my Quarto website!</title>
  <dc:creator>Ella Kaye</dc:creator>
  <link>https://ellakaye.co.uk/posts/2022-12-11_welcome-quarto/index.html</link>
  <description><![CDATA[ 




<!--------------- set up ----------------->
<!--------------- post content ----------------->
<p>Hello, and welcome to my new site, built using <a href="https://quarto.org" target="_blank">Quarto</a>. Here’s why I switched from <a href="https://rstudio.github.io/distill/" target="_blank">{distill}</a> and the resources that helped me in the process. I also outline some of the customisations I made and set out plans for future blog posts.</p>
<section id="why-quarto-why-now" class="level2">
<h2 class="anchored" data-anchor-id="why-quarto-why-now">Why Quarto? Why now?</h2>
<p>I was very happy with my previous <a href="../../posts/2021-05-08_welcome-distill/index.html">website built using {distill}</a>. Then Quarto was released and it quickly became clear that everything that I loved about working with {distill} was true of Quarto, and then some. As a keen user of a whole suite of packages in the R Markdown ecosystem, I could see the appeal of one coherent system to produce reports, presentations, books and websites. Moreover, Quarto is the natural successor to R Markdown, bringing with it a vast range of improvements, building on what <a href="https://posit.co">Posit</a> (formerly RStudio) learnt over a decade of developing the latter. When it was made clear that although Posit will maintain {distill}, all future improvements will be to Quarto, I knew it was only a matter of time before I rewrote my website once again (for the fourth time).</p>
<p>I’m finding working with Quarto to be an absolute joy!</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>This post is not a guide on how to get a Quarto website up and running and styled. There are already great resources for that. These are the the ones that I found most helpful.</p>
<section id="the-basics" class="level3">
<h3 class="anchored" data-anchor-id="the-basics">The basics</h3>
<ul>
<li><p>My first taste of Quarto was Mine Çetinkaya-Rundel’s <a href="https://www.youtube.com/watch?v=6p4vOKS6Xls" target="_blank">talk</a> about it at the 2022 Toronto Workshop on Reproducibility.</p></li>
<li><p>The official Quarto <a href="https://quarto.org/docs/get-started/" target="_blank">tutorials</a> taught me the basics.</p></li>
<li><p>The official Quarto <a href="https://quarto.org/docs/guide/" target="_blank">guide</a> is a treasure trove with the section on <a href="https://quarto.org/docs/websites/">websites</a> being, needless to say, most helpful for the development of this site.</p></li>
</ul>
<p>These two posts on making the transition from R Markdown/{distill} to Quarto were also extremely useful:</p>
<ul>
<li><p>Danielle Navarro on <a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/" target="_blank">porting a distill blog to Quarto</a>.</p></li>
<li><p>Alison Hill’s post on why <a href="https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/" target="_blank">we don’t talk about Quarto</a>.</p></li>
</ul>
</section>
<section id="going-further" class="level3">
<h3 class="anchored" data-anchor-id="going-further">Going further</h3>
<p>The above resources were enough for me to replicate the website I’d built with {distill}, but as I was putting it together, a couple of excellent posts were published that showed how much customisation was possible, and which massively increased my ambitions for my new site:</p>
<ul>
<li><p>Albert Rapp’s <a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html" target="_blank">ultimate guide to starting a Quarto blog</a>.</p></li>
<li><p>Christian Gebhard’s guide on <a href="https://jollydata.blog/posts/2022-08-06-_switching-to-quarto/switching-to-quarto.html" target="_blank">switching to Quarto</a>.</p></li>
</ul>
<p>These two posts, in particular, gave me the inspiration and most of the know-how to create my custom home page. They also both contain helpful information on themes and styling.</p>
</section>
</section>
<section id="my-customisations-aka-how-long-could-this-possibly-take" class="level2">
<h2 class="anchored" data-anchor-id="my-customisations-aka-how-long-could-this-possibly-take">My customisations AKA how long could this possibly take?</h2>
<p>I didn’t think it would take too long to make some tweaks, but the more I worked on the site, the more I wanted to change. I’ve managed, with help, to implement customisations that I haven’t seen or read about elsewhere in relation to Quarto. Getting a basic Quarto site up is relatively straight-forward (in fact, Tom Mock shows how it can be done in just <a href="https://www.youtube.com/watch?v=t8qtcDyCRFA" target="_blank">100 seconds</a>), but extensive customisation, particularly when starting with a rudimentary knowledge of HTML and CSS, turned out to be pretty tricky.</p>
<p>In this section, I’m going to list what I think are the cool features of this site, all of which I had to learn how to implement as I went along. Some of them are Quarto-specific. Others I expect will be fairly standard to those with a more advanced knowledge of front-end web development, but may well also be new to others who, like me, have come to website-building with Quarto from a backgroud in R programming rather than HTML/CSS/JS.</p>
<p>For the sake of brevity, in <em>this</em> post I don’t detail how I achieved these customisations. I just note what I had to learn to implement them. I intend to spin each of the points below into separate tutorial-style blog posts. If you’re interested in seeing how I implemented them in the meantime, you can check out this site’s <a href="https://github.com/EllaKaye/ellakaye.co.uk" target="_blank">repo</a>.</p>
<section id="animated-css-logo" class="level3">
<h3 class="anchored" data-anchor-id="animated-css-logo">Animated CSS logo</h3>
<p>My favourite feature of my website is the logo/home link in the top left corner, which is animated on hover.<sup>1</sup> To implement this, I had to learn first how to create and style the static version using HTML and CSS and then how to apply the CSS animation. I also had to figure out what HTML I could get away with using in <code>_quarto.yml</code> and the best place in that file to add the code. There were also inconsistencies between browers to contend with. I was inspired to animate my logo by <a href="https://maya.rbind.io" target="_blank">Maya Gans</a>, who helped me a lot with the implementation.</p>
<p>Creating a logo with CSS also made it possible to easily change its appearance in the light and dark modes of the site. Along the way, I also learnt <a href="https://github.com/quarto-dev/quarto-cli/discussions/1647" target="_blank">another strategy</a> for using different logo images in light and dark modes, using CSS to overwrite one image file with another, which is useful if a logo doesn’t lend itself to creation in CSS.</p>
</section>
<section id="animated-navigation-bar-links-and-colours" class="level3">
<h3 class="anchored" data-anchor-id="animated-navigation-bar-links-and-colours">Animated navigation bar links and colours</h3>
<p>Having animated my logo, I turned to adding an animation on hover to the rest of the links on the navigation bar and learnt more CSS in the process, including <span class="citation" data-cites="media">@media</span> queries to ensure that the animations only activate when the navbar is in a row. I found a solution online for the animation itself, but figuring out how to match the colours on hover and on the link for the active page to the colour of the corresponding card on the homepage was tricky.</p>
</section>
<section id="css-grid-and-bootstrap-cards" class="level3">
<h3 class="anchored" data-anchor-id="css-grid-and-bootstrap-cards">CSS grid and bootstrap cards</h3>
<p>Speaking of which, creating the custom layout of my homepage, using CSS grid and bootstrap cards, was a challenge. The blog posts by Albert and Christian linked to in the previous section got me a lot of the way there, but I still had to dive deep into the <a href="https://getbootstrap.com/docs/5.0/getting-started/introduction/">bootstrap documentation</a> to make sure the cards and the links inside them all lined up nicely.</p>
</section>
<section id="light-and-dark-mode" class="level3">
<h3 class="anchored" data-anchor-id="light-and-dark-mode">Light and dark mode</h3>
<p>I put a <em>lot</em> of thought into the colour scheme for both the light and dark modes of the site, and making sure they complemented each other perfectly. For this, I built on what I’d learnt about <a href="../../posts/2021-05-26_custom-highlighting-distill-2/index.html">colour theory and accessibility when designing a custom syntax highlight scheme</a> for my previous website. I also learnt about Sass and made extensive use of custom Sass variables.</p>
</section>
<section id="custom-syntax-highlighting" class="level3">
<h3 class="anchored" data-anchor-id="custom-syntax-highlighting">Custom syntax highlighting</h3>
<p>Having <a href="../../posts/2021-05-25_custom-highlighting-distill-1/index.html">implemented a custom syntax highlight theme</a> for my {distill} site, and created a function for the <a href="../../packages/distilltools/index.html">{distilltools}</a> package so others could do the same, I had hoped to be able to port that straight over to my Quarto site. Unfortunately, it wasn’t so simple. Although they are both called <code>arrow</code>, there are changes in the implementation of the default syntax highlight scheme for Quarto from how it was implemented in {distill}, and, to make things more awkward, there are also inconsistencies between the light and dark versions of <code>arrow</code> in Quarto. It took me a while to get my head around all that. Modifying my original highlighting theme and creating a complementary theme for the dark mode was finicky.</p>
</section>
<section id="giscus-comments-box-lightdark-toggle" class="level3">
<h3 class="anchored" data-anchor-id="giscus-comments-box-lightdark-toggle">giscus comments box light/dark toggle</h3>
<p>Quarto makes it easy to add <a href="https://giscus.app" target="_blank">giscus</a> comments boxes, and giscus (and in turn Quarto) make it simple to select from a handful of different themes to style those boxes. There are a selection of light and dark themes, and one option to set the default light or dark theme dynamically based on your computer system setting. There was not, however, an obvious way of making the theme of the giscus box change responsively on toggling the light/dark switch. In response to my query, with a lot of back and forth, Sage (the creator of giscus) figured out the <a href="https://github.com/giscus/giscus/issues/336#issuecomment-1214366281" target="_blank">JavaScript to make this happen</a> and I figured out how to <a href="https://github.com/giscus/giscus/issues/336#issuecomment-1214401296" target="_blank">integrate it into the Quarto site</a>.</p>
<p>I would like to apply custom CSS to the giscus comments box in both light and dark modes, which should be possible. I haven’t yet been able to make it work, though, which appears to be an <a href="https://github.com/giscus/giscus/issues/789" target="_blank">issue</a> related to hosting on Netlify.</p>
</section>
<section id="local-fonts-and-open-type-font-features" class="level3">
<h3 class="anchored" data-anchor-id="local-fonts-and-open-type-font-features">Local fonts and open type font features</h3>
<p>Because I’m interested in typography and think that professional fonts are worth paying for, and in order to give my site a distinct appearance, I purchased licenses for <a href="" target="_blank">Lemon Milk Pro</a> (used for body and header text) and <a href="https://www.monolisa.dev" target="_blank">MonoLisa</a> (used for code). Having done so, I then had to learn the CSS/Sass to apply the local font files to the site. I also learnt all about <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/OpenType_fonts_guide">open type font features</a>, and how to turn them on and off using CSS. I needed this to turn off the default coding ligatures in MonoLisa.<sup>2</sup></p>
</section>
<section id="icon-links" class="level3">
<h3 class="anchored" data-anchor-id="icon-links">Icon links</h3>
<p>As on my {distill} site, I’ve made copious use of the <code>icon_link()</code> function in my <a href="https://github.com/EllaKaye/distilltools/" target="_blank">{distilltools}</a> package, a handy R function that creates a link, with an icon and some text that, with some additional CSS, can be styled a bit like a button, e.g.&nbsp;the code</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">distilltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit">icon_link</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit">"github"</span>,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit">"site repo"</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit">url =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit">"https://github.com/EllaKaye/ellakaye.co.uk"</span></span>
<span id="cb1-5">)</span></code></pre></div>
<p>outputs HTML which, with some CSS styling for the <code>icon-link</code> class, renders as the following:</p>
<p><a href="https://github.com/EllaKaye/ellakaye.co.uk" class="icon-link" target="_blank" rel="noopener"><i class="fab fa-github"></i> site repo</a></p>
<p>The function still works on a Quarto site, but there’s a lot of set-up that’s different. Unlike {distill}, Quarto doesn’t support Font Awesome out of the box, although there are a couple of options for accessing those icons. Copying over the CSS for the <code>icon-link</code> class from a {distill} site didn’t look right on Quarto, so further tweaks were necessary. There are also differences between {distill} and Quarto on the effect of calling the function in a code block vs inline code, and also different sensitivities to spacing/new lines.</p>
<p>The <code>icon_link()</code> function could do with an update, to include bootstrap icons (which are automatically available in Quarto sites), to update to the latest Font Awesome icons (it currently uses 5.15, whereas the latest release is 6.2) and possibly to add more icon sets.</p>
</section>
</section>
<section id="so-how-long-did-it-take" class="level2">
<h2 class="anchored" data-anchor-id="so-how-long-did-it-take">So, how long did it take?</h2>
<p>I took me four months, working intermittently, to put this site together, <em>much</em> longer than I had anticipated when embarking on the project.</p>
<p>Shortly after I finally shared my site, I came across the <a href="https://www.globalnerdy.com/2021/06/07/the-programmers-credo/">The Programmers’ Credo</a>. It rang true!</p>
<blockquote class="blockquote">
<p>We do these things not because they are easy, but because we thought they were going to be easy.</p>
</blockquote>
<p>That said, I consider the fact that it was <em>not</em> easy to be a positive, in that I’ve learnt a lot. And, once I’ve finished the series of blog posts on my new-found knowledge, hopefully you will have too.<sup>3</sup></p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2023-03-01 15:41:01 GMT</p>
</div></section><section id="details" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2022-12-11_welcome-quarto/index.qmd" target="_blank">source code</a>, <a href="https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2022-12-11_welcome-quarto/renv.lock" target="_blank">R environment</a></p>
</div></section><section id="session-info" class="level5 appendix"><h2 class="anchored quarto-appendix-heading">Session info</h2><div class="quarto-appendix-contents">

<details>
<summary>
Toggle
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.2.2 (2022-10-31)
 os       macOS Ventura 13.2.1
 system   aarch64, darwin20
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       Europe/London
 date     2023-03-01
 pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)
 quarto   1.3.97 @ /usr/local/bin/quarto

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date (UTC) lib source
 sessioninfo * 1.2.2   2021-12-06 [2] CRAN (R 4.2.0)

 [1] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20
 [2] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>
</details>


<!-- -->

</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This works best on a laptop/desktop but there’s a hint of it on a smartphone when the logo is pressed.↩︎</p></li>
<li id="fn2"><p>As much as I love coding ligatures when writing code for myself, I prefer not to use them when demonstrating code to others as it’s not then clear what they have to type to replicate it.↩︎</p></li>
<li id="fn3"><p>Due to other commitments, I’m highly unlikely to write any further posts before late Febrary 2023. There are several for me to write, so if there are any of the above topics you’re particularly interested in, please comment below and I’ll prioritse accordingly.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">https://creativecommons.org/licenses/by-sa/4.0/</a></div></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kaye2022,
  author = {Kaye, Ella},
  title = {Welcome to My {Quarto} Website!},
  date = {2022-12-11},
  url = {https://ellakaye.co.uk/posts/2022-12-11_welcome-quarto},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kaye2022" class="csl-entry quarto-appendix-citeas">
Kaye, Ella. 2022. <span>“Welcome to My Quarto Website!”</span> December
11, 2022. <a href="https://ellakaye.co.uk/posts/2022-12-11_welcome-quarto">https://ellakaye.co.uk/posts/2022-12-11_welcome-quarto</a>.
</div></div></section></div> ]]></description>
  <category>Quarto</category>
  <category>distilltools</category>
  <guid>https://ellakaye.co.uk/posts/2022-12-11_welcome-quarto/index.html</guid>
  <pubDate>Sun, 11 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://ellakaye.co.uk/posts/2022-12-11_welcome-quarto/quarto.png" medium="image" type="image/png" height="35" width="144"/>
</item>
</channel>
</rss>
